/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.report;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map.Entry;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Document.*;
import org.jdom.Element;
import org.jdom.output.XMLOutputter;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.datamodel.BlackboardArtifact;
import org.sleuthkit.datamodel.BlackboardAttribute;
import org.sleuthkit.datamodel.File;
import org.sleuthkit.datamodel.SleuthkitCase;
public class reportXML {
    
    public reportXML (HashMap<BlackboardArtifact,ArrayList<BlackboardAttribute>> report){
        try{
         Case currentCase = Case.getCurrentCase(); // get the most updated case
         SleuthkitCase skCase = currentCase.getSleuthkitCase();
         String caseName = currentCase.getName();
         Integer imagecount = currentCase.getImageIDs().length;
         Integer filesystemcount = currentCase.getRootObjectsCount();
         Element root = new Element("Case");
         Document xmldoc = new Document(root);
         DateFormat datetimeFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
         DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
         Date date = new Date();
         String datetime = datetimeFormat.format(date);
         String datenotime = dateFormat.format(date);
         Comment comment = new Comment("XML Report Generated by Autopsy 3 on " + datetime);
         root.addContent(comment);
         //Create summary node involving how many of each type
         Element summary = new Element("Summary");
         summary.addContent(new Element("Name").setText(caseName));
         summary.addContent(new Element("Total-Images").setText(imagecount.toString()));
         summary.addContent(new Element("Total-FileSystems").setText(filesystemcount.toString()));
         root.addContent(summary);
         //generate the nodes for each of the types so we can use them later
         Element nodeGen = new Element("General-Information");
         Element nodeWebBookmark = new Element("Web-Bookmarks");
         Element nodeWebCookie = new Element("Web-Cookies");
         Element nodeWebHistory = new Element("Web-History");
         Element nodeWebDownload = new Element("Web-Downloads");
         Element nodeRecentObjects = new Element("Recent-Documents");
         Element nodeTrackPoint = new Element("Track-Points");
         Element nodeInstalled = new Element("Installed-Programfiles");
         Element nodeKeyword = new Element("Keyword-Search-Hits");
         Element nodeHash = new Element("Hashset-Hits");
         for (Entry<BlackboardArtifact,ArrayList<BlackboardAttribute>> entry : report.entrySet()) {
            Element artifact = new Element("Artifact");
            Long objId = entry.getKey().getObjectID();
          File file = skCase.getFileById(objId);
            Long filesize = file.getSize();
            artifact.setAttribute("ID", objId.toString());
          artifact.setAttribute("Name", file.getName().toString());
         artifact.setAttribute("Size", filesize.toString());
            
            // Get all the attributes for this guy
             for (BlackboardAttribute tempatt : entry.getValue())
                 {
                  Element attribute = new Element("Attribute").setAttribute("Type",tempatt.getAttributeTypeDisplayName());
                  Element value = new Element("Value").setText(tempatt.getValueString());
                  attribute.addContent(value);
                  Element context = new Element("Context").setText(tempatt.getContext());
                  attribute.addContent(context);
                  artifact.addContent(attribute);
                 }
             
            if(entry.getKey().getArtifactTypeID() == 1){
                //while (entry.getValue().iterator().hasNext())
               // {
              //  }
                nodeGen.addContent(artifact);
            }
            if(entry.getKey().getArtifactTypeID() == 2){
                
                
                nodeWebBookmark.addContent(artifact);
            }
            if(entry.getKey().getArtifactTypeID() == 3){
                
                nodeWebCookie.addContent(artifact);
            }
            if(entry.getKey().getArtifactTypeID() == 4){
                
                nodeWebHistory.addContent(artifact);
            }
            if(entry.getKey().getArtifactTypeID() == 5){
                 nodeWebDownload.addContent(artifact);
            }
            if(entry.getKey().getArtifactTypeID() == 6){
                 nodeRecentObjects.addContent(artifact);
            }
            if(entry.getKey().getArtifactTypeID() == 7){
                 nodeTrackPoint.addContent(artifact);
            }
            if(entry.getKey().getArtifactTypeID() == 8){
                 nodeInstalled.addContent(artifact);
            }
            if(entry.getKey().getArtifactTypeID() == 9){
                 nodeKeyword.addContent(artifact);
            }
            if(entry.getKey().getArtifactTypeID() == 10){
                 nodeHash.addContent(artifact);
            } 
        
            //end of master loop
        }
         
          //add them in the order we want them to the document
            root.addContent(nodeGen);
            root.addContent(nodeWebBookmark);
            root.addContent(nodeWebCookie);
            root.addContent(nodeWebHistory);
            root.addContent(nodeWebDownload);
            root.addContent(nodeRecentObjects);
            root.addContent(nodeTrackPoint);
            root.addContent(nodeInstalled);
            root.addContent(nodeKeyword);
            root.addContent(nodeHash); 
         
            try {
                  FileOutputStream out = new FileOutputStream(currentCase.getTempDirectory()+"/" + caseName + "-" + datenotime + ".xml");
                  XMLOutputter serializer = new XMLOutputter();
                  serializer.output(xmldoc, out);
                  out.flush();
                  out.close();
                }
            catch (IOException e) {
              System.err.println(e);
                }

                }   
    catch (Exception e){
        
    }
  }
}
