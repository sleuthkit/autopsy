/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.report;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map.Entry;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.datamodel.BlackboardArtifact;
import org.sleuthkit.datamodel.BlackboardAttribute;
import org.sleuthkit.datamodel.File;
import org.sleuthkit.datamodel.SleuthkitCase;

/**
 *
 * @author Alex
 */
public class reportHTML {
    
    //Declare our publically accessible formatted report, this will change everytime they run a report
    public StringBuilder formatted_Report = new StringBuilder();
    
    
public reportHTML (HashMap<BlackboardArtifact,ArrayList<BlackboardAttribute>> report){
            
            
        try{
             Case currentCase = Case.getCurrentCase(); // get the most updated case
             SleuthkitCase skCase = currentCase.getSleuthkitCase();
             String caseName = currentCase.getName();
             Integer imagecount = currentCase.getImageIDs().length;
             Integer filesystemcount = currentCase.getRootObjectsCount();
             DateFormat datetimeFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
             DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
             Date date = new Date();
             String datetime = datetimeFormat.format(date);
             String datenotime = dateFormat.format(date);
             //Add html header info
            formatted_Report.append("<html><head>Autopsy Report for Case:").append(caseName).append("</head><body><div id=\"main\"><div id=\"content\">");
            // Add summary information now
            formatted_Report.append("<h1>Report for Case: ").append(caseName).append("</h1>");
            formatted_Report.append("<h3>Case Summary</h3><p>XML Report Generated by Autopsy 3 on ").append(datetime).append("<br /><ul>");
            formatted_Report.append("<li># of Images: ").append(imagecount).append("</li>");
            formatted_Report.append("<li>FileSystems: ").append(filesystemcount).append("</li>");
            
             StringBuilder nodeGen = new StringBuilder("<h3>General Information</h3>");
             StringBuilder nodeWebBookmark =  new StringBuilder("<h3>Web Bookmarks</h3>");
             StringBuilder nodeWebCookie =  new StringBuilder("<h3>Web Cookies</h3>");
             StringBuilder nodeWebHistory =  new StringBuilder("<h3>Web History</h3>");
             StringBuilder nodeWebDownload =  new StringBuilder("<h3>Web Downloads</h3>");
             StringBuilder nodeRecentObjects =  new StringBuilder("<h3>Recent Documents</h3>");
             StringBuilder nodeTrackPoint =  new StringBuilder("<h3>Track Points</h3>");
             StringBuilder nodeInstalled =  new StringBuilder("<h3>Installed Programs</h3>");
             StringBuilder nodeKeyword =  new StringBuilder("<h3>Keyword Search Hits</h3>");
             StringBuilder nodeHash =  new StringBuilder("<h3>Hashset Hits</h3>");
            
             for (Entry<BlackboardArtifact,ArrayList<BlackboardAttribute>> entry : report.entrySet()) {
                StringBuilder artifact = new StringBuilder("<p>Artifact");
                Long objId = entry.getKey().getObjectID();
                File file = skCase.getFileById(objId);
                Long filesize = file.getSize();
                artifact.append(" ID: ").append(objId.toString());
                artifact.append("<br /> Name: <strong>").append(file.getName().toString()).append("</strong>");
                artifact.append("<br />Path: ").append(file.getParentPath());
                artifact.append("<br /> Size: ").append(filesize.toString());
                artifact.append("</p><ul style=\"list-style-type: none;\">");
                
                    // Get all the attributes for this guy
                     for (BlackboardAttribute tempatt : entry.getValue())
                         {
                          StringBuilder attribute = new StringBuilder("<li style=\"list-style-type: none;\">Type:  ").append(tempatt.getAttributeTypeDisplayName()).append("</li>");
                          attribute.append("<li style=\"list-style-type: none;\">Value:  ").append(tempatt.getValueString()).append("</li>");
                          attribute.append("<li style=\"list-style-type: none;\"> Context:  ").append(tempatt.getContext()).append("</li>");
                    
                          artifact.append(attribute);
                         }
                    artifact.append("</ul>");
                    if(entry.getKey().getArtifactTypeID() == 1){  
                        nodeGen.append(artifact);
                    }
                    if(entry.getKey().getArtifactTypeID() == 2){
                        nodeWebBookmark.append(artifact);
                    }
                    if(entry.getKey().getArtifactTypeID() == 3){

                        nodeWebCookie.append(artifact);
                    }
                    if(entry.getKey().getArtifactTypeID() == 4){

                        nodeWebHistory.append(artifact);
                    }
                    if(entry.getKey().getArtifactTypeID() == 5){
                         nodeWebDownload.append(artifact);
                    }
                    if(entry.getKey().getArtifactTypeID() == 6){
                         nodeRecentObjects.append(artifact);
                    }
                    if(entry.getKey().getArtifactTypeID() == 7){
                         nodeTrackPoint.append(artifact);
                    }
                    if(entry.getKey().getArtifactTypeID() == 8){
                         nodeInstalled.append(artifact);
                    }
                    if(entry.getKey().getArtifactTypeID() == 9){
                         nodeKeyword.append(artifact);
                    }
                    if(entry.getKey().getArtifactTypeID() == 10){
                         nodeHash.append(artifact);
                    } 
            //Add them back in order
            formatted_Report.append(nodeGen);
            formatted_Report.append(nodeWebBookmark);
            formatted_Report.append(nodeWebCookie);
            formatted_Report.append(nodeWebHistory);
            formatted_Report.append(nodeWebDownload);
            formatted_Report.append(nodeRecentObjects);
            formatted_Report.append(nodeTrackPoint);
            formatted_Report.append(nodeInstalled);
            formatted_Report.append(nodeKeyword);
            formatted_Report.append(nodeHash); 
            //end of master loop
            }
                formatted_Report.append("</div></div></body></html>");
            }
            catch(Exception e)
            {

            }
        }


}