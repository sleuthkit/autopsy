/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.report;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map.Entry;
import org.jdom.Comment;
import org.jdom.Element;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.datamodel.BlackboardArtifact;
import org.sleuthkit.datamodel.BlackboardAttribute;
import org.sleuthkit.datamodel.File;
import org.sleuthkit.datamodel.SleuthkitCase;

/**
 *
 * @author Alex
 */
public class reportHTML {
    
    //Declare our publically accessible formatted report, this will change everytime they run a report
    public String formatted_Report = "";
    
    
public reportHTML (HashMap<BlackboardArtifact,ArrayList<BlackboardAttribute>> report){
            
            
        try{
             Case currentCase = Case.getCurrentCase(); // get the most updated case
             SleuthkitCase skCase = currentCase.getSleuthkitCase();
             String caseName = currentCase.getName();
             Integer imagecount = currentCase.getImageIDs().length;
             Integer filesystemcount = currentCase.getRootObjectsCount();
             DateFormat datetimeFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
             DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
             Date date = new Date();
             String datetime = datetimeFormat.format(date);
             String datenotime = dateFormat.format(date);
             //Add html header info
            formatted_Report +="<html><head>Autopsy Report for Case:" + caseName + "</head><body><div id=\"main\"><div id=\"content\">";
            // Add summary information now
            formatted_Report +="<h1>Report for Case: " + caseName + "</h1>";
            formatted_Report +="<h3>Case Summary</h3><p>XML Report Generated by Autopsy 3 on " + datetime + "<br /><ul>";
            formatted_Report +="<li># of Images: " + imagecount + "</li>";
            formatted_Report +="<li>FileSystems: " + filesystemcount + "</li>";
            
             String nodeGen = "<h3>General-Information</h3>";
             String nodeWebBookmark = "<h3>Web-Bookmarks</h3>";
             String nodeWebCookie = "<h3>Web-Cookies</h3>";
             String nodeWebHistory = "<h3>Web-History</h3>";
             String nodeWebDownload = "<h3>Web-Downloads</h3>";
             String nodeRecentObjects = "<h3>Recent-Documents</h3>";
             String nodeTrackPoint = "<h3>Track-Points</h3>";
             String nodeInstalled = "<h3>Installed-Programfiles</h3>";
             String nodeKeyword = "<h3>Keyword-Search-Hits</h3>";
             String nodeHash = "<h3>Hashset-Hits</h3>";
            
             for (Entry<BlackboardArtifact,ArrayList<BlackboardAttribute>> entry : report.entrySet()) {
                String artifact = "<p>Artifact";
                Long objId = entry.getKey().getObjectID();
                File file = skCase.getFileById(objId);
                Long filesize = file.getSize();
                artifact += " ID: " + objId.toString();
                artifact += "<br /> Name: <strong>" + file.getName().toString() + "</strong>";
                artifact += "<br />Path: " + file.getParentPath();
                artifact += "<br /> Size: " + filesize.toString();
                artifact += "</p><ul style=\"list-style-type: none;\">";
                
                    // Get all the attributes for this guy
                     for (BlackboardAttribute tempatt : entry.getValue())
                         {
                          String attribute = "<li style=\"list-style-type: none;\">Type:  " + tempatt.getAttributeTypeDisplayName() + "</li>";
                          attribute += "<li style=\"list-style-type: none;\">Value:  " + tempatt.getValueString() + "</li>";
                          attribute += "<li style=\"list-style-type: none;\"> Context:  " + tempatt.getContext() + "</li>";
                    
                          artifact += attribute;
                         }
                    artifact += "</ul>";
                    if(entry.getKey().getArtifactTypeID() == 1){  
                        nodeGen += artifact;
                    }
                    if(entry.getKey().getArtifactTypeID() == 2){
                        nodeWebBookmark += artifact;
                    }
                    if(entry.getKey().getArtifactTypeID() == 3){

                        nodeWebCookie += artifact;
                    }
                    if(entry.getKey().getArtifactTypeID() == 4){

                        nodeWebHistory += artifact;
                    }
                    if(entry.getKey().getArtifactTypeID() == 5){
                         nodeWebDownload += artifact;
                    }
                    if(entry.getKey().getArtifactTypeID() == 6){
                         nodeRecentObjects += artifact;
                    }
                    if(entry.getKey().getArtifactTypeID() == 7){
                         nodeTrackPoint += artifact;
                    }
                    if(entry.getKey().getArtifactTypeID() == 8){
                         nodeInstalled += artifact;
                    }
                    if(entry.getKey().getArtifactTypeID() == 9){
                         nodeKeyword += artifact;
                    }
                    if(entry.getKey().getArtifactTypeID() == 10){
                         nodeHash += artifact;
                    } 
            //Add them back in order
            formatted_Report += nodeGen;
            formatted_Report += nodeWebBookmark;
            formatted_Report += nodeWebCookie;
            formatted_Report += nodeWebHistory;
            formatted_Report += nodeWebDownload;
            formatted_Report += nodeRecentObjects;
            formatted_Report += nodeTrackPoint;
            formatted_Report += nodeInstalled;
            formatted_Report += nodeKeyword;
            formatted_Report += nodeHash; 
            //end of master loop
            }
                formatted_Report +="</div></div></body></html>";
            }
            catch(Exception e)
            {

            }
        }


}