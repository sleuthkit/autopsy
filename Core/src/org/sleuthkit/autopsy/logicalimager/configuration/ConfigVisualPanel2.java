/*
 * Autopsy
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.logicalimager.configuration;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;

/**
 * Configuration Visual Panel 2
 */
@NbBundle.Messages({
    "ConfigVisualPanel2.ok=OK",
    "ConfigVisualPanel2.cancel=Cancel"
})
@SuppressWarnings("PMD.SingularField") // UI widgets cause lots of false positives
final class ConfigVisualPanel2 extends JPanel {

    private static final long serialVersionUID = 1L;
    private String configFilename;
    private LogicalImagerConfig config = null;
    private final JButton okButton = new JButton(Bundle.ConfigVisualPanel2_ok());
    private final JButton cancelButton = new JButton(Bundle.ConfigVisualPanel2_cancel());
    private boolean flagEncryptionPrograms = false;

    /**
     * Creates new form ConfigVisualPanel2
     */
    ConfigVisualPanel2() {
        initComponents();
        if (config != null) {
            updatePanel(configFilename, config);
        }
    }

    @NbBundle.Messages({
        "ConfigVisualPanel2.editConfiguration=Configure imager"
    })
    @Override
    public String getName() {
        return Bundle.ConfigVisualPanel2_editConfiguration();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modifiedDateLabel = new javax.swing.JLabel();
        modifiedWithinTextField = new javax.swing.JTextField();
        daysIncludedLabel = new javax.swing.JLabel();
        fullPathsLabel = new javax.swing.JLabel();
        flagEncryptionProgramsCheckBox = new javax.swing.JCheckBox();
        ruleNameLabel = new javax.swing.JLabel();
        ruleNameEditTextField = new javax.swing.JTextField();
        newRuleButton = new javax.swing.JButton();
        descriptionLabel = new javax.swing.JLabel();
        editRuleButton = new javax.swing.JButton();
        descriptionEditTextField = new javax.swing.JTextField();
        deleteRuleButton = new javax.swing.JButton();
        fullPathsScrollPane = new javax.swing.JScrollPane();
        fullPathsTable = new javax.swing.JTable();
        filenamesScrollPane = new javax.swing.JScrollPane();
        filenamesTable = new javax.swing.JTable();
        shouldSaveCheckBox = new javax.swing.JCheckBox();
        shouldAlertCheckBox = new javax.swing.JCheckBox();
        folderNamesScrollPane = new javax.swing.JScrollPane();
        folderNamesTable = new javax.swing.JTable();
        extensionsLabel = new javax.swing.JLabel();
        extensionsTextField = new javax.swing.JTextField();
        filenamesLabel = new javax.swing.JLabel();
        configFileTextField = new javax.swing.JTextField();
        ruleSetFileLabel = new javax.swing.JLabel();
        finalizeImageWriter = new javax.swing.JCheckBox();
        rulesScrollPane = new javax.swing.JScrollPane();
        rulesTable = new javax.swing.JTable();
        folderNamesLabel = new javax.swing.JLabel();
        fileSizeLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        minSizeLabel = new javax.swing.JLabel();
        minSizeTextField = new javax.swing.JFormattedTextField();
        maxSizeLabel = new javax.swing.JLabel();
        maxSizeTextField = new javax.swing.JFormattedTextField();

        org.openide.awt.Mnemonics.setLocalizedText(modifiedDateLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.modifiedDateLabel.text")); // NOI18N

        modifiedWithinTextField.setEditable(false);
        modifiedWithinTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        modifiedWithinTextField.setEnabled(false);
        modifiedWithinTextField.setMinimumSize(new java.awt.Dimension(60, 20));
        modifiedWithinTextField.setPreferredSize(new java.awt.Dimension(60, 20));

        org.openide.awt.Mnemonics.setLocalizedText(daysIncludedLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.daysIncludedLabel.text")); // NOI18N
        daysIncludedLabel.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(fullPathsLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.fullPathsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(flagEncryptionProgramsCheckBox, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.flagEncryptionProgramsCheckBox.text")); // NOI18N
        flagEncryptionProgramsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flagEncryptionProgramsCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(ruleNameLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.ruleNameLabel.text")); // NOI18N

        ruleNameEditTextField.setEnabled(false);

        newRuleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/add16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(newRuleButton, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.newRuleButton.text")); // NOI18N
        newRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRuleButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(descriptionLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.descriptionLabel.text")); // NOI18N

        editRuleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/edit16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(editRuleButton, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.editRuleButton.text")); // NOI18N
        editRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRuleButtonActionPerformed(evt);
            }
        });

        descriptionEditTextField.setEnabled(false);

        deleteRuleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/delete16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(deleteRuleButton, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.deleteRuleButton.text")); // NOI18N
        deleteRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRuleButtonActionPerformed(evt);
            }
        });

        fullPathsTable.setColumnSelectionAllowed(true);
        fullPathsTable.setEnabled(false);
        fullPathsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fullPathsTable.setShowHorizontalLines(false);
        fullPathsTable.setShowVerticalLines(false);
        fullPathsTable.getTableHeader().setReorderingAllowed(false);
        fullPathsScrollPane.setViewportView(fullPathsTable);
        fullPathsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (fullPathsTable.getColumnModel().getColumnCount() > 0) {
            fullPathsTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.fullPathsTable.columnModel.title0")); // NOI18N
        }

        filenamesTable.setEnabled(false);
        filenamesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        filenamesTable.setShowHorizontalLines(false);
        filenamesTable.setShowVerticalLines(false);
        filenamesTable.getTableHeader().setReorderingAllowed(false);
        filenamesScrollPane.setViewportView(filenamesTable);
        if (filenamesTable.getColumnModel().getColumnCount() > 0) {
            filenamesTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.filenamesTable.columnModel.title0")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(shouldSaveCheckBox, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.shouldSaveCheckBox.text")); // NOI18N
        shouldSaveCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.shouldSaveCheckBox.toolTipText")); // NOI18N
        shouldSaveCheckBox.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(shouldAlertCheckBox, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.shouldAlertCheckBox.text")); // NOI18N
        shouldAlertCheckBox.setEnabled(false);

        folderNamesTable.setEnabled(false);
        folderNamesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        folderNamesTable.setShowHorizontalLines(false);
        folderNamesTable.setShowVerticalLines(false);
        folderNamesTable.getTableHeader().setReorderingAllowed(false);
        folderNamesScrollPane.setViewportView(folderNamesTable);
        if (folderNamesTable.getColumnModel().getColumnCount() > 0) {
            folderNamesTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.folderNamesTable.columnModel.title0")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(extensionsLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.extensionsLabel.text")); // NOI18N

        extensionsTextField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(filenamesLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.filenamesLabel.text")); // NOI18N

        configFileTextField.setToolTipText("");
        configFileTextField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(ruleSetFileLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.ruleSetFileLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(finalizeImageWriter, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.finalizeImageWriter.text")); // NOI18N
        finalizeImageWriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizeImageWriterActionPerformed(evt);
            }
        });

        rulesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        rulesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        rulesTable.setShowHorizontalLines(false);
        rulesTable.setShowVerticalLines(false);
        rulesTable.getTableHeader().setReorderingAllowed(false);
        rulesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                rulesTableMouseReleased(evt);
            }
        });
        rulesTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rulesTableKeyReleased(evt);
            }
        });
        rulesScrollPane.setViewportView(rulesTable);
        if (rulesTable.getColumnModel().getColumnCount() > 0) {
            rulesTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.rulesTable.columnModel.title0")); // NOI18N
            rulesTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.rulesTable.columnModel.title1")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(folderNamesLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.folderNamesLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fileSizeLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.fileSizeLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(minSizeLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.minSizeLabel.text")); // NOI18N

        minSizeTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###; "))));
        minSizeTextField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(maxSizeLabel, org.openide.util.NbBundle.getMessage(ConfigVisualPanel2.class, "ConfigVisualPanel2.maxSizeLabel.text")); // NOI18N

        maxSizeTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###; "))));
        maxSizeTextField.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(ruleSetFileLabel)
                .addGap(18, 18, 18)
                .addComponent(configFileTextField)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newRuleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editRuleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteRuleButton))
                    .addComponent(rulesScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(flagEncryptionProgramsCheckBox)
                                    .addComponent(finalizeImageWriter)
                                    .addComponent(shouldSaveCheckBox)
                                    .addComponent(shouldAlertCheckBox)
                                    .addComponent(extensionsLabel)
                                    .addComponent(filenamesLabel)
                                    .addComponent(descriptionLabel)
                                    .addComponent(ruleNameLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(modifiedDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(fileSizeLabel)
                                            .addComponent(fullPathsLabel)
                                            .addComponent(folderNamesLabel))
                                        .addGap(4, 4, 4)
                                        .addComponent(minSizeLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(minSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(maxSizeLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(maxSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(107, 107, 107))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(modifiedWithinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(daysIncludedLabel))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(ruleNameEditTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(descriptionEditTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(extensionsTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fullPathsScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(filenamesScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(folderNamesScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addContainerGap())))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteRuleButton, editRuleButton, newRuleButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(configFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ruleSetFileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rulesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newRuleButton)
                            .addComponent(editRuleButton)
                            .addComponent(deleteRuleButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(descriptionEditTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(descriptionLabel))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(extensionsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(extensionsLabel)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ruleNameEditTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ruleNameLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filenamesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filenamesLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(folderNamesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(folderNamesLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fullPathsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(fullPathsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(11, 11, 11)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(minSizeLabel)
                            .addComponent(minSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxSizeLabel)
                            .addComponent(maxSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fileSizeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(modifiedDateLabel)
                            .addComponent(modifiedWithinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(daysIncludedLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(shouldSaveCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shouldAlertCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(flagEncryptionProgramsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(finalizeImageWriter)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rulesTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rulesTableKeyReleased
        updateForSelectedRule();
    }//GEN-LAST:event_rulesTableKeyReleased

    @NbBundle.Messages({
        "ConfigVisualPanel2.editRuleSet=Edit Rule",
        "ConfigVisualPanel2.editRuleError=Edit rule error"
    })
    private void editRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRuleButtonActionPerformed
        int row = rulesTable.getSelectedRow();
        if (row != -1) {
            String ruleName = (String) rulesTable.getModel().getValueAt(row, 0);
            LogicalImagerRule rule = getRuleSetFromCurrentConfig().getRules().get(row);
            EditRulePanel editPanel = new EditRulePanel(okButton, cancelButton, ruleName, rule);
            editPanel.setEnabled(true);
            editPanel.setVisible(true);

            while (true) {
                int option = JOptionPane.showOptionDialog(this, editPanel.getPanel(), Bundle.ConfigVisualPanel2_editRuleSet(),
                        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                        null, new Object[]{okButton, cancelButton}, okButton);
                if (option == JOptionPane.OK_OPTION) {
                    try {
                        ImmutablePair<String, LogicalImagerRule> ruleMap = editPanel.toRule();
                        updateRow(row, ruleMap);
                        break;
                    } catch (IOException | NumberFormatException ex) {
                        JOptionPane.showMessageDialog(this,
                                ex.getMessage(),
                                Bundle.ConfigVisualPanel2_editRuleError(),
                                JOptionPane.ERROR_MESSAGE);
                        // let user fix the error
                    }
                } else {
                    break;
                }
            }
        }
    }//GEN-LAST:event_editRuleButtonActionPerformed

    @Messages({"ConfigVisualPanel2.newRule.name=New Rule",
        "ConfigVisualPanel2.newRuleError.title=New rule error",
        "# {0} - ruleName",
        "ConfigVisualPanel2.newRuleError.duplicateName=A rule with named \"{0}\" already exists please choose a different name"})
    private void newRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRuleButtonActionPerformed
        NewRulePanel panel;
        panel = new NewRulePanel(okButton, cancelButton);
        panel.setEnabled(true);
        panel.setVisible(true);

        while (true) {
            int option = JOptionPane.showOptionDialog(this, panel, Bundle.ConfigVisualPanel2_newRule_name(),
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, new Object[]{okButton, cancelButton}, okButton);
            if (option == JOptionPane.OK_OPTION) {
                try {

                    ImmutablePair<String, LogicalImagerRule> ruleMap = panel.toRule();
                    if (ruleExists(ruleMap)) {
                        JOptionPane.showMessageDialog(this,
                                Bundle.ConfigVisualPanel2_newRuleError_duplicateName(ruleMap.getKey()),
                                Bundle.ConfigVisualPanel2_newRuleError_title(),
                                JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                    // Save the new rule
                    appendRow(ruleMap);
                    break;
                } catch (IOException | NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this,
                            ex.getMessage(),
                            Bundle.ConfigVisualPanel2_newRuleError_title(),
                            JOptionPane.ERROR_MESSAGE);
                    // let user fix the error
                }
            } else {
                break;
            }
        }
    }//GEN-LAST:event_newRuleButtonActionPerformed

    @NbBundle.Messages({
        "ConfigVisualPanel2.deleteRuleSet=Delete rule ",
        "ConfigVisualPanel2.deleteRuleSetConfirmation=Delete rule confirmation",})
    private void deleteRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRuleButtonActionPerformed
        int index = rulesTable.getSelectedRow();
        if (index != -1) {
            String ruleName = (String) rulesTable.getModel().getValueAt(index, 0);

            int option = JOptionPane.showOptionDialog(this,
                    Bundle.ConfigVisualPanel2_deleteRuleSet() + ruleName,
                    Bundle.ConfigVisualPanel2_deleteRuleSetConfirmation(),
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (option == JOptionPane.NO_OPTION) {
                return;
            }

            getRuleSetFromCurrentConfig().getRules().remove(index);
            updatePanel(configFilename, config);
            if (rulesTable.getRowCount() > 0) {
                rulesTable.setRowSelectionInterval(0, 0);
                updateForSelectedRule();
            }
        }
    }//GEN-LAST:event_deleteRuleButtonActionPerformed

    private void rulesTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rulesTableMouseReleased
        updateForSelectedRule();
    }//GEN-LAST:event_rulesTableMouseReleased

    private void flagEncryptionProgramsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flagEncryptionProgramsCheckBoxActionPerformed
        flagEncryptionPrograms = flagEncryptionProgramsCheckBox.isSelected();
        setEnabledEncryptionProgramsRule(flagEncryptionPrograms);
    }//GEN-LAST:event_flagEncryptionProgramsCheckBoxActionPerformed

    private void finalizeImageWriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizeImageWriterActionPerformed
        config.setFinalizeImageWriter(finalizeImageWriter.isSelected());
    }//GEN-LAST:event_finalizeImageWriterActionPerformed

    /**
     * Set the whether the a rule for detecting encryption programs will be
     * added to the rules in this config
     *
     * @param flagEncryptionPrograms true to have encryption programs rule
     *                               added, false otherwise.
     */
    private void setEnabledEncryptionProgramsRule(boolean flagEncryptionPrograms) {
        if (flagEncryptionPrograms) {
            // add the special rule
            ImmutablePair<String, LogicalImagerRule> ruleMap = createEncryptionProgramsRule();
            appendRow(ruleMap);
        } else {
            // remove it
            int index = ((RulesTableModel) rulesTable.getModel()).findRow(EncryptionProgramsRule.getName());
            if (index != -1) {
                getRuleSetFromCurrentConfig().getRules().remove(index);
                updatePanel(configFilename, config);
                if (rulesTable.getRowCount() > 0) {
                    rulesTable.setRowSelectionInterval(0, 0);
                    updateForSelectedRule();
                }
            }
        }
    }

    /*
     * Create an encryption programs rule
     */
    private ImmutablePair<String, LogicalImagerRule> createEncryptionProgramsRule() {
        LogicalImagerRule.Builder builder = new LogicalImagerRule.Builder();
        builder.getName(EncryptionProgramsRule.getName())
                .getDescription(EncryptionProgramsRule.getDescription())
                .getShouldAlert(true)
                .getShouldSave(true)
                .getFilenames(EncryptionProgramsRule.getFilenames());
        LogicalImagerRule rule = builder.build();
        return new ImmutablePair<>(EncryptionProgramsRule.getName(), rule);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField configFileTextField;
    private javax.swing.JLabel daysIncludedLabel;
    private javax.swing.JButton deleteRuleButton;
    private javax.swing.JTextField descriptionEditTextField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JButton editRuleButton;
    private javax.swing.JLabel extensionsLabel;
    private javax.swing.JTextField extensionsTextField;
    private javax.swing.JLabel fileSizeLabel;
    private javax.swing.JLabel filenamesLabel;
    private javax.swing.JScrollPane filenamesScrollPane;
    private javax.swing.JTable filenamesTable;
    private javax.swing.JCheckBox finalizeImageWriter;
    private javax.swing.JCheckBox flagEncryptionProgramsCheckBox;
    private javax.swing.JLabel folderNamesLabel;
    private javax.swing.JScrollPane folderNamesScrollPane;
    private javax.swing.JTable folderNamesTable;
    private javax.swing.JLabel fullPathsLabel;
    private javax.swing.JScrollPane fullPathsScrollPane;
    private javax.swing.JTable fullPathsTable;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel maxSizeLabel;
    private javax.swing.JFormattedTextField maxSizeTextField;
    private javax.swing.JLabel minSizeLabel;
    private javax.swing.JFormattedTextField minSizeTextField;
    private javax.swing.JLabel modifiedDateLabel;
    private javax.swing.JTextField modifiedWithinTextField;
    private javax.swing.JButton newRuleButton;
    private javax.swing.JTextField ruleNameEditTextField;
    private javax.swing.JLabel ruleNameLabel;
    private javax.swing.JLabel ruleSetFileLabel;
    private javax.swing.JScrollPane rulesScrollPane;
    private javax.swing.JTable rulesTable;
    private javax.swing.JCheckBox shouldAlertCheckBox;
    private javax.swing.JCheckBox shouldSaveCheckBox;
    // End of variables declaration//GEN-END:variables

    private LogicalImagerRuleSet getRuleSetFromCurrentConfig() {
        if (config.getRuleSets().isEmpty()) {
            List<LogicalImagerRuleSet> ruleSets = new ArrayList<>();
            ruleSets.add(new LogicalImagerRuleSet("no-set-name", new ArrayList<>())); // NON-NLS
            config.setRuleSet(ruleSets);
        }
        return config.getRuleSets().get(0);
    }

    /**
     * Update the panel to reflect the rules in the current config
     *
     * @param configFilePath  path of the config file being modified
     * @param config          contents of the config file being modifed
     * @param rowSelectionkey the name of the rule to select by default
     */
    private void updatePanel(String configFilePath, LogicalImagerConfig config, String rowSelectionkey) {
        configFileTextField.setText(configFilePath);
        finalizeImageWriter.setSelected(config.isFinalizeImageWriter());
        LogicalImagerRuleSet ruleSet = getRuleSetFromCurrentConfig();
        flagEncryptionProgramsCheckBox.setSelected(ruleSet.find(EncryptionProgramsRule.getName()) != null);
        RulesTableModel rulesTableModel = new RulesTableModel();
        int row = 0;
        int selectThisRow = 0;

        Collections.sort(ruleSet.getRules(), new SortRuleByName());

        for (LogicalImagerRule rule : ruleSet.getRules()) {
            rulesTableModel.setValueAt(rule.getName(), row, 0);
            if (rowSelectionkey != null && rowSelectionkey.equals(rule.getName())) {
                selectThisRow = row;
            }
            rulesTableModel.setValueAt(rule.getDescription(), row, 1);
            rulesTableModel.setValueAt(rule, row, 2);
            row++;
        }
        rulesTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        rulesTable.setModel(rulesTableModel);
        // If there are any rules, select the first one
        if (rulesTableModel.getRowCount() > 0) {
            rulesTable.setRowSelectionInterval(selectThisRow, selectThisRow);
            updateForSelectedRule();
        } else {
            clearRuleDetails();
            updateRuleButtons(false);
        }
    }

    /**
     * Private helper method to call updatePanel with no row to select specified
     *
     * @param configFilePath path of the config file being modified
     * @param config         contents of the config file being modifed
     */
    private void updatePanel(String configFilePath, LogicalImagerConfig config) {
        updatePanel(configFilePath, config, null);
    }

    /**
     * Update the panel to reflect the selected rule
     */
    private void updateForSelectedRule() {
        int index = rulesTable.getSelectedRow();
        if (index != -1) {
            String ruleName = (String) rulesTable.getModel().getValueAt(index, 0);
            String description = (String) rulesTable.getModel().getValueAt(index, 1);
            updateRuleDetails(ruleName, description);
            updateRuleButtons(!ruleName.equals(EncryptionProgramsRule.getName()));
        } else {
            clearRuleDetails();
            updateRuleButtons(false);
        }
    }

    /**
     * Update the panel to display details of the specified rule
     *
     * @param ruleName    the name of the rule to display
     * @param description the description of the rule to display
     */
    private void updateRuleDetails(String ruleName, String description) {
        clearRuleDetails();
        LogicalImagerRule rule = getRuleSetFromCurrentConfig().find(ruleName);
        shouldAlertCheckBox.setSelected(rule.isShouldAlert());
        shouldSaveCheckBox.setSelected(rule.isShouldSave());
        ruleNameEditTextField.setText(ruleName);
        descriptionEditTextField.setText(description);
        updateExtensions(rule.getExtensions());
        updateList(filenamesTable, rule.getFilenames());
        updateList(folderNamesTable, rule.getPaths());
        updateList(fullPathsTable, rule.getFullPaths());
        if (rule.getMinFileSize() == null) {
            minSizeTextField.setText("");
        } else {
            minSizeTextField.setText(rule.getMinFileSize().toString());
        }
        if (rule.getMaxFileSize() == null) {
            maxSizeTextField.setText("");
        } else {
            maxSizeTextField.setText(rule.getMaxFileSize().toString());
        }
        if (rule.getMinDays() == null) {
            modifiedWithinTextField.setText("");
        } else {
            modifiedWithinTextField.setText(Integer.toString(rule.getMinDays()));
        }
    }

    /**
     * Reset rule details displayed to be blank or default
     */
    private void clearRuleDetails() {
        ruleNameEditTextField.setText("");
        descriptionEditTextField.setText("");
        extensionsTextField.setText("");
        updateExtensions(null);
        updateList(filenamesTable, null);
        updateList(folderNamesTable, null);
        updateList(fullPathsTable, null);
        minSizeTextField.setText("");
        maxSizeTextField.setText("");
        modifiedWithinTextField.setText("");
        shouldSaveCheckBox.setSelected(true);
        shouldAlertCheckBox.setSelected(false);
    }

    /**
     * Update the extensions displayed
     *
     * @param extensions the list of extensions to display, null to display
     *                   nothing
     */
    private void updateExtensions(List<String> extensions) {
        extensionsTextField.setText("");
        if (extensions == null) {
            return;
        }
        String content = "";
        boolean first = true;
        for (String ext : extensions) {
            content += (first ? "" : ",") + ext;
            first = false;
        }
        extensionsTextField.setText(content);
    }

    /**
     * Update a JTable to display a list of Strings
     *
     * @param jTable the JTable to update
     * @param list   the list of Strings to display, null to display nothing
     */
    private void updateList(javax.swing.JTable jTable, List<String> list) {
        SingleColumnTableModel tableModel = new SingleColumnTableModel();
        jTable.setTableHeader(null);
        if (list == null) {
            jTable.setModel(tableModel);
            return;
        }
        int row = 0;
        for (String s : list) {
            tableModel.setValueAt(s, row, 0);
            row++;
        }
        jTable.setModel(tableModel);
    }

    void setConfiguration(String configFilename, LogicalImagerConfig config) {
        this.configFilename = configFilename;
        this.config = config;
        updatePanel(configFilename, config);
    }

    private void updateRow(int index, ImmutablePair<String, LogicalImagerRule> ruleMap) {
        getRuleSetFromCurrentConfig().getRules().remove(index);
        getRuleSetFromCurrentConfig().getRules().add(ruleMap.getValue());
        updatePanel(configFilename, config, ruleMap.getKey());
    }

    /**
     * Check if a rule with the same name as this rule already exists
     *
     * @param ruleMap the rule to check the name of
     *
     * @return true if it exists, false otherwise
     */
    private boolean ruleExists(ImmutablePair<String, LogicalImagerRule> ruleMap) {
        for (LogicalImagerRule rule : getRuleSetFromCurrentConfig().getRules()) {
            if (rule.getName().equals(ruleMap.getKey())) {
                return true;
            }
        }
        return false;
    }

    private void appendRow(ImmutablePair<String, LogicalImagerRule> ruleMap) {
        getRuleSetFromCurrentConfig().getRules().add(ruleMap.getValue());
        updatePanel(configFilename, config, ruleMap.getKey());
    }

    /**
     * Adjust the enabled status of the rule buttons to reflect wether there is
     * a currently selected rule which can be modified
     *
     * @param isRowSelected true if a row is selected, false otherwise
     */
    private void updateRuleButtons(boolean isRowSelected) {
        newRuleButton.setEnabled(true);
        editRuleButton.setEnabled(isRowSelected);
        deleteRuleButton.setEnabled(isRowSelected);
    }

    /**
     * Sort rule by name
     */
    private class SortRuleByName implements Comparator<LogicalImagerRule> {

        @Override
        public int compare(LogicalImagerRule a, LogicalImagerRule b) {
            return a.getName().compareToIgnoreCase(b.getName());
        }
    }

    /**
     * RulesTableModel for rules table
     */
    private class RulesTableModel extends AbstractTableModel {

        private static final long serialVersionUID = 1L;
        private final List<String> ruleName = new ArrayList<>();
        private final List<String> ruleDescription = new ArrayList<>();
        private final List<LogicalImagerRule> rule = new ArrayList<>();

        int findRow(String name) {
            return ruleName.indexOf(name);
        }

        @Override
        public int getRowCount() {
            return ruleName.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @NbBundle.Messages({
            "ConfigVisualPanel2.rulesTable.columnModel.title0=Rule Name",
            "ConfigVisualPanel2.rulesTable.columnModel.title1=Description"
        })
        @Override
        public String getColumnName(int column) {
            String colName = null;
            switch (column) {
                case 0:
                    colName = Bundle.ConfigVisualPanel2_rulesTable_columnModel_title0();
                    break;
                case 1:
                    colName = Bundle.ConfigVisualPanel2_rulesTable_columnModel_title1();
                    break;
                default:
                    break;
            }
            return colName;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Object ret = null;
            switch (columnIndex) {
                case 0:
                    ret = ruleName.get(rowIndex);
                    break;
                case 1:
                    ret = ruleDescription.get(rowIndex);
                    break;
                case 2:
                    ret = rule.get(rowIndex);
                    break;
                default:
                    throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
            return ret;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    ruleName.add((String) aValue);
                    break;
                case 1:
                    ruleDescription.add((String) aValue);
                    break;
                case 2:
                    rule.add((LogicalImagerRule) aValue);
                    break;
                default:
                    throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
            // Only show the name and description column
            if (columnIndex < 2) {
                super.setValueAt(aValue, rowIndex, columnIndex);
            }
        }
    }

    /**
     * Table model for single column list table.
     */
    private class SingleColumnTableModel extends AbstractTableModel {

        private static final long serialVersionUID = 1L;

        private final List<String> list = new ArrayList<>();

        @Override
        public int getRowCount() {
            return list.size();
        }

        @Override
        public int getColumnCount() {
            return 1;
        }

        @Override
        public String getColumnName(int column) {
            return "";
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Object ret = null;
            if (columnIndex == 0) {
                ret = list.get(rowIndex);
            } else {
                throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
            return ret;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return true;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                list.add((String) aValue);
            } else {
                throw new UnsupportedOperationException("Invalid table column index: " + columnIndex); //NON-NLS
            }
        }
    }
}
