/*
 * Autopsy Forensic Browser
 *
 * Copyright 2020 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.modules.yara.ui;

import java.awt.Component;
import org.sleuthkit.autopsy.coreutils.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.openide.util.NbBundle.Messages;
import org.sleuthkit.autopsy.modules.yara.rules.RuleSet;

/**
 * A panel for displaying the details of an individual yara rule set.
 */
public class RuleSetDetailsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    private static final Logger logger = Logger.getLogger(RuleSetDetailsPanel.class.getName());

    private RuleSet currentRuleSet;
    private final DefaultListModel<File> fileListModel;
    private final JList<File> fileList;

    /**
     * Creates new form RuleSetDetailsPanel
     */
    public RuleSetDetailsPanel() {
        initComponents();

        fileListModel = new DefaultListModel<>();
        fileList = new JList<>();
        fileList.setModel(fileListModel);
        fileList.setCellRenderer(new FileRenderer());
        openFolderButton.setEnabled(false);
        scrollPane.setViewportView(fileList);
        refreshButton.setEnabled(false);
    }

    /**
     * Update the panel to show the details of the given RuleSet.
     *
     * @param ruleSet New RuleSet to display
     */
    void setRuleSet(RuleSet ruleSet) {
        currentRuleSet = ruleSet;

        fileListModel.clear();

        if (ruleSet != null) {
            List<File> files = currentRuleSet.getRuleFiles();
            
            if(files != null) {
                for (File file : files) {
                    fileListModel.addElement(file);
                }
            }
        }

        openFolderButton.setEnabled(ruleSet != null);
        refreshButton.setEnabled(ruleSet != null);
    }
    
    /**
     * Simple ListCellRenderer for the file list.
     */
    private final class FileRenderer extends DefaultListCellRenderer {

        private static final long serialVersionUID = 1L;

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

            if (value instanceof File) {
                File file = (File) value;
                setText(file.getName());
                setToolTipText(file.getAbsolutePath());
            }

            return this;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JLabel ruleSetListLabel = new javax.swing.JLabel();
        javax.swing.JLabel setDetailsLabel = new javax.swing.JLabel();
        openFolderButton = new javax.swing.JButton();
        openLabel = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        refreshButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(ruleSetListLabel, org.openide.util.NbBundle.getMessage(RuleSetDetailsPanel.class, "RuleSetDetailsPanel.ruleSetListLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 3, 0);
        add(ruleSetListLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(setDetailsLabel, org.openide.util.NbBundle.getMessage(RuleSetDetailsPanel.class, "RuleSetDetailsPanel.setDetailsLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(setDetailsLabel, gridBagConstraints);

        openFolderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/folder-icon-16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(openFolderButton, org.openide.util.NbBundle.getMessage(RuleSetDetailsPanel.class, "RuleSetDetailsPanel.openFolderButton.text")); // NOI18N
        openFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFolderButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(openFolderButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(openLabel, org.openide.util.NbBundle.getMessage(RuleSetDetailsPanel.class, "RuleSetDetailsPanel.openLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(openLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(scrollPane, gridBagConstraints);

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/images/arrow-circle-double-135.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(refreshButton, org.openide.util.NbBundle.getMessage(RuleSetDetailsPanel.class, "RuleSetDetailsPanel.refreshButton.text")); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        add(refreshButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    @Messages({
        "RuleSetDetailsPanel_failed_to_open_folder_msg=Failed to open new window for rule set file.",
        "RuleSetDetailsPanel_failed_to_open_folder_title=Open Error"
    })
    private void openFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFolderButtonActionPerformed
        if (currentRuleSet != null) {
            File file = currentRuleSet.getPath().toFile();
            if (file.exists()) {
                try {
                    Desktop.getDesktop().open(file);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this,
                            Bundle.RuleSetDetailsPanel_failed_to_open_folder_msg(),
                            Bundle.RuleSetDetailsPanel_failed_to_open_folder_title(),
                            JOptionPane.ERROR_MESSAGE);
                    logger.log(Level.WARNING, String.format("Failed to open external file explorer for: %s", currentRuleSet.getPath().toString()), ex);
                }
            }
        }
    }//GEN-LAST:event_openFolderButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        if (currentRuleSet != null) {
            fileListModel.clear();
            List<File> files = currentRuleSet.getRuleFiles();
            
            if(files != null) {
                for (File file : files) {
                    fileListModel.addElement(file);
                }
            }
        }
    }//GEN-LAST:event_refreshButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton openFolderButton;
    private javax.swing.JLabel openLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
