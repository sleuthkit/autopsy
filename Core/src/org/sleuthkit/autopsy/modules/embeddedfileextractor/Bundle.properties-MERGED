CannotCreateOutputFolder=Unable to create output folder.
CannotRunFileTypeDetection=Unable to run file type detection.
EmbeddedFileExtractorIngestModule.ArchiveExtractor.moduleDesc.text=Extracts embedded files (doc, docx, ppt, pptx, xls, xlsx, zip, rar, arj, 7z, gzip, bzip2, tar), schedules them for ingestion, and populates the directory tree with them.
EmbeddedFileExtractorIngestModule.ArchiveExtractor.moduleName=Embedded File Extractor
EmbeddedFileExtractorIngestModule.NoOpenCase.errMsg=No open case available.
EmbeddedFileExtractorIngestModule.UnableToGetMSOfficeExtractor.errMsg=Unable to get MSOfficeEmbeddedContentExtractor.
ExtractArchiveWithPasswordAction.extractFailed.title=Failed to Unpack Files, with Password
ExtractArchiveWithPasswordAction.name.text=Unzip contents with password
# {0} - archiveFile
ExtractArchiveWithPasswordAction.progress.text=Unpacking contents of archive: {0}
ExtractArchiveWithPasswordAction.prompt.text=Enter Password
ExtractArchiveWithPasswordAction.prompt.title=Enter Password
OpenIDE-Module-Display-Category=Ingest Module
OpenIDE-Module-Long-Description=\
    Embedded File Extraction Ingest Module\n\nThe Embedded File Extraction Ingest Module processes document files (such as doc, docx, ppt, pptx, xls, xlsx) and archive files (such as zip and others archive types supported by the 7zip extractor).\n\
    Contents of these files are extracted and the derived files are added back to the current ingest to be processed by the configured ingest modules.\n\
    If the derived file happens to be an archive file, it will be re-processed by the 7zip extractor - the extractor will process archive files N-levels deep.\n\n\
    The extracted files are navigable in the directory tree.\n\n\
    The module is supported on Windows, Linux and Mac operating systems.
OpenIDE-Module-Name=Embedded File Extraction
OpenIDE-Module-Short-Description=Embedded File Extraction Ingest Module
EmbeddedFileExtractorIngestModule.SevenZipContentReadStream.seek.exception.invalidOrigin=Invalid seek origin: {0}
EmbeddedFileExtractorIngestModule.SevenZipContentReadStream.read.exception.errReadStream=Error reading content stream.
EmbeddedFileExtractorIngestModule.ArchiveExtractor.encryptionFileLevel=Content-only Encryption (Archive File)
EmbeddedFileExtractorIngestModule.ArchiveExtractor.encryptionFull=Full Encryption (Archive File)
EmbeddedFileExtractorIngestModule.ArchiveExtractor.init.errInitModule.details=Error initializing output dir: {0}: {1}
EmbeddedFileExtractorIngestModule.ArchiveExtractor.isZipBombCheck.warnMsg=Possible ZIP bomb detected in archive: {0}, item: {1}
EmbeddedFileExtractorIngestModule.ArchiveExtractor.isZipBombCheck.warnDetails=Compression ratio is {0}, skipping items in {1}.
EmbeddedFileExtractorIngestModule.ArchiveExtractor.unpack.warnMsg.zipBomb=Possible ZIP bomb detected: {0}
EmbeddedFileExtractorIngestModule.ArchiveExtractor.unpack.warnDetails.zipBomb=The archive is {0} levels deep, skipping processing of {1}
EmbeddedFileExtractorIngestModule.ArchiveExtractor.unpack.unknownPath.msg=Unknown item path in archive: {0}, will use: {1}
EmbeddedFileExtractorIngestModule.ArchiveExtractor.unpack.notEnoughDiskSpace.msg=Not enough disk space to unpack archive item: {0}, {1}
EmbeddedFileExtractorIngestModule.ArchiveExtractor.unpack.notEnoughDiskSpace.details=The archive item is too large to unpack, skipping unpacking this item.
EmbeddedFileExtractorIngestModule.ArchiveExtractor.unpack.errUnpacking.msg=Error unpacking {0}
EmbeddedFileExtractorIngestModule.ArchiveExtractor.unpack.errUnpacking.details=Error unpacking  {0}. {1}
EmbeddedFileExtractorIngestModule.ArchiveExtractor.unpack.encrFileDetected.msg=Encrypted files in archive detected.
EmbeddedFileExtractorIngestModule.ArchiveExtractor.unpack.encrFileDetected.details=Some files in archive: {0} are encrypted. {1} extractor was unable to extract all files from this archive.
EmbeddedFileExtractorIngestModule.ArchiveExtractor.UnpackStream.write.exception.msg=Error writing unpacked file to: {0}
EmbeddedFileExtractorIngestModule.ArchiveExtractor.UnpackedTree.exception.msg=Error adding a derived file to db:{0}
EmbeddedFileExtractorIngestModule.ImageExtractor.docContainer.init.err=Doc container could not be initialized while reading 
EmbeddedFileExtractorIngestModule.ImageExtractor.docxContainer.init.err=Docx container could not be initialized while reading: {0}
EmbeddedFileExtractorIngestModule.ImageExtractor.pptContainer.init.err=Ppt container could not be initialized while reading: {0}
EmbeddedFileExtractorIngestModule.ImageExtractor.pptxContainer.init.err=Pptx container could not be initialized while reading: {0}
EmbeddedFileExtractorIngestModule.ImageExtractor.xlsContainer.init.err=Xls container could not be initialized while reading: {0}
EmbeddedFileExtractorIngestModule.ImageExtractor.xlsxContainer.init.err=Xlsx container could not be initialized while reading: {0}
EmbeddedFileExtractorIngestModule.ImageExtractor.extractImage.addToDB.exception.msg=Unable to add the derived files to the database.
EmbeddedFileExtractorIngestModule.ImageExtractor.getOutputFolderPath.exception.msg=Could not get path for image extraction from Abstract File: {0}
EmbeddedFileExtractorIngestModule.ImageExtractor.getOutputFolderPath.exception.msg=Could not get path for image extraction from Abstract File: {0}
EmbeddedFileExtractorIngestModule.ArchiveExtractor.UnpackStream.write.noSpace.msg=Unable to write content to disk. Not enough space.
SevenZipContentReadStream.seek.exception.invalidOrigin=Invalid origin {0}
SevenZipContentReadStream.read.exception.errReadStream=Error reading stream
SevenZipExtractor.indexError.message=Failed to index encryption detected artifact for keyword search.
# {0} -  rootArchive
SevenZipExtractor.zipBombArtifactCreation.text=Zip Bomb Detected {0}
UnableToInitializeLibraries=Unable to initialize 7Zip libraries.
