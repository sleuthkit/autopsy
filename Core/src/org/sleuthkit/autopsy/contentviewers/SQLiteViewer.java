/*
 * Autopsy Forensic Browser
 *
 * Copyright 2018 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.contentviewers;

import java.awt.BorderLayout;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.TreeMap;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.openide.util.NbBundle;
import org.openide.windows.WindowManager;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.autopsy.casemodule.NoCurrentCaseException;
import org.sleuthkit.autopsy.casemodule.services.FileManager;
import org.sleuthkit.autopsy.casemodule.services.Services;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.autopsy.datamodel.ContentUtils;
import org.sleuthkit.datamodel.AbstractFile;
import org.sleuthkit.datamodel.SleuthkitCase;
import org.sleuthkit.datamodel.TskCoreException;
import org.sleuthkit.autopsy.corecomponentinterfaces.FileTypeViewer;
import org.sleuthkit.autopsy.coreutils.MessageNotifyUtil;

/**
 * A file content viewer for SQLite database files.
 */
public class SQLiteViewer extends javax.swing.JPanel implements FileTypeViewer {

    private static final long serialVersionUID = 1L;
    public static final String[] SUPPORTED_MIMETYPES = new String[]{"application/x-sqlite3"};
    private static final int ROWS_PER_PAGE = 100;
    private static final Logger logger = Logger.getLogger(FileViewer.class.getName());
    private final SQLiteTableView selectedTableView = new SQLiteTableView();
    private AbstractFile sqliteDbFile;
    private File tmpDbFile;
    private Connection connection;
    private int numRows;    // num of rows in the selected table
    private int currPage = 0; // curr page of rows being displayed
    private SwingWorker<? extends Object, ? extends Object> worker;

    /**
     * Constructs a file content viewer for SQLite database files.
     */
    public SQLiteViewer() {
        initComponents();
        jTableDataPanel.add(selectedTableView, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHdrPanel = new javax.swing.JPanel();
        tablesDropdownList = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        numEntriesField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        currPageLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        numPagesLabel = new javax.swing.JLabel();
        prevPageButton = new javax.swing.JButton();
        nextPageButton = new javax.swing.JButton();
        jTableDataPanel = new javax.swing.JPanel();

        jHdrPanel.setPreferredSize(new java.awt.Dimension(536, 40));

        tablesDropdownList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        tablesDropdownList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablesDropdownListActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SQLiteViewer.class, "SQLiteViewer.jLabel1.text")); // NOI18N

        numEntriesField.setEditable(false);
        numEntriesField.setText(org.openide.util.NbBundle.getMessage(SQLiteViewer.class, "SQLiteViewer.numEntriesField.text")); // NOI18N
        numEntriesField.setBorder(null);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SQLiteViewer.class, "SQLiteViewer.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(currPageLabel, org.openide.util.NbBundle.getMessage(SQLiteViewer.class, "SQLiteViewer.currPageLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(SQLiteViewer.class, "SQLiteViewer.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(numPagesLabel, org.openide.util.NbBundle.getMessage(SQLiteViewer.class, "SQLiteViewer.numPagesLabel.text")); // NOI18N

        prevPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/corecomponents/btn_step_back.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(prevPageButton, org.openide.util.NbBundle.getMessage(SQLiteViewer.class, "SQLiteViewer.prevPageButton.text")); // NOI18N
        prevPageButton.setBorderPainted(false);
        prevPageButton.setContentAreaFilled(false);
        prevPageButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/corecomponents/btn_step_back_disabled.png"))); // NOI18N
        prevPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));
        prevPageButton.setPreferredSize(new java.awt.Dimension(23, 23));
        prevPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevPageButtonActionPerformed(evt);
            }
        });

        nextPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/corecomponents/btn_step_forward.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(nextPageButton, org.openide.util.NbBundle.getMessage(SQLiteViewer.class, "SQLiteViewer.nextPageButton.text")); // NOI18N
        nextPageButton.setBorderPainted(false);
        nextPageButton.setContentAreaFilled(false);
        nextPageButton.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/org/sleuthkit/autopsy/corecomponents/btn_step_forward_disabled.png"))); // NOI18N
        nextPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));
        nextPageButton.setPreferredSize(new java.awt.Dimension(23, 23));
        nextPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextPageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jHdrPanelLayout = new javax.swing.GroupLayout(jHdrPanel);
        jHdrPanel.setLayout(jHdrPanelLayout);
        jHdrPanelLayout.setHorizontalGroup(
            jHdrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jHdrPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablesDropdownList, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(numEntriesField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currPageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numPagesLabel)
                .addGap(18, 18, 18)
                .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
        );
        jHdrPanelLayout.setVerticalGroup(
            jHdrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jHdrPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jHdrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jHdrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tablesDropdownList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(numEntriesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(currPageLabel)
                        .addComponent(jLabel3)
                        .addComponent(numPagesLabel)))
                .addContainerGap())
        );

        jTableDataPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jHdrPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTableDataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jHdrPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jTableDataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nextPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextPageButtonActionPerformed
        currPage++;
        if (currPage * ROWS_PER_PAGE > numRows) {
            nextPageButton.setEnabled(false);
        }
        currPageLabel.setText(Integer.toString(currPage));
        prevPageButton.setEnabled(true);

        // read and display a page of rows
        String tableName = (String) this.tablesDropdownList.getSelectedItem();
        readTable(tableName, (currPage - 1) * ROWS_PER_PAGE + 1, ROWS_PER_PAGE);
    }//GEN-LAST:event_nextPageButtonActionPerformed

    private void prevPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevPageButtonActionPerformed
        currPage--;
        if (currPage == 1) {
            prevPageButton.setEnabled(false);
        }
        currPageLabel.setText(Integer.toString(currPage));
        nextPageButton.setEnabled(true);

        // read and display a page of rows
        String tableName = (String) this.tablesDropdownList.getSelectedItem();
        readTable(tableName, (currPage - 1) * ROWS_PER_PAGE + 1, ROWS_PER_PAGE);
    }//GEN-LAST:event_prevPageButtonActionPerformed

    private void tablesDropdownListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablesDropdownListActionPerformed
        JComboBox<?> cb = (JComboBox<?>) evt.getSource();
        String tableName = (String) cb.getSelectedItem();
        if (null == tableName) {
            return;
        }
        selectTable(tableName);
    }//GEN-LAST:event_tablesDropdownListActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currPageLabel;
    private javax.swing.JPanel jHdrPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jTableDataPanel;
    private javax.swing.JButton nextPageButton;
    private javax.swing.JTextField numEntriesField;
    private javax.swing.JLabel numPagesLabel;
    private javax.swing.JButton prevPageButton;
    private javax.swing.JComboBox<String> tablesDropdownList;
    // End of variables declaration//GEN-END:variables

    @Override
    public List<String> getSupportedMIMETypes() {
        return Arrays.asList(SUPPORTED_MIMETYPES);
    }

    @Override
    public void setFile(AbstractFile file) {
        sqliteDbFile = file;
        processSQLiteFile();
    }

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public void resetComponent() {
        tablesDropdownList.setEnabled(true);
        tablesDropdownList.removeAllItems();
        numEntriesField.setText("");

        // close DB connection to file
        if (null != connection) {
            try {
                connection.close();
                connection = null;
            } catch (SQLException ex) {
                logger.log(Level.SEVERE, "Failed to close DB connection to file.", ex); //NON-NLS
            }
        }

        // delete last temp file
        if (null != tmpDbFile) {
            tmpDbFile.delete();
            tmpDbFile = null;
        }
        
        sqliteDbFile = null;
    }

    /**
     * Process the given SQLite DB file.
     */
    @NbBundle.Messages({
        "SQLiteViewer.comboBox.noTableEntry=No tables found",
        "SQLiteViewer.errorMessage.interrupted=The processing of the file was interrupted.",
        "SQLiteViewer.errorMessage.noCurrentCase=The case has been closed.",
        "SQLiteViewer.errorMessage.failedToExtractFile=The file could not be extracted from the data source.",
        "SQLiteViewer.errorMessage.failedToQueryDatabase=The database tables in the file could not be read.",
        "SQLiteViewer.errorMessage.failedToinitJDBCDriver=The JDBC driver for SQLite could not be loaded.",
        "# {0} - exception message", "SQLiteViewer.errorMessage.unexpectedError=An unexpected error occurred:\n{0).",})
    private void processSQLiteFile() {
        SwingUtilities.invokeLater(() -> {
            tablesDropdownList.removeAllItems();
        });
        new SwingWorker<Map<String, String>, Void>() {
            @Override
            protected Map<String, String> doInBackground() throws NoCurrentCaseException, TskCoreException, IOException, SQLException, ClassNotFoundException {
                // Copy the file to temp folder
                String tmpDBPathName = Case.getOpenCase().getTempDirectory() + File.separator + sqliteDbFile.getName();
                tmpDbFile = new File(tmpDBPathName);
                ContentUtils.writeToFile(sqliteDbFile, tmpDbFile);

                // Look for any meta files associated with this DB - WAL, SHM, etc. 
                findAndCopySQLiteMetaFile(sqliteDbFile, sqliteDbFile.getName() + "-wal");
                findAndCopySQLiteMetaFile(sqliteDbFile, sqliteDbFile.getName() + "-shm");

                // Load the SQLite JDBC driver, if necessary.
                Class.forName("org.sqlite.JDBC"); //NON-NLS  
                connection = DriverManager.getConnection("jdbc:sqlite:" + tmpDBPathName); //NON-NLS

                // Query the file for the table names and schemas.
                return getTables();
            }

            @Override
            protected void done() {
                super.done();
                try {
                    Map<String, String> dbTablesMap = get();
                    if (dbTablesMap.isEmpty()) {
                        tablesDropdownList.addItem(Bundle.SQLiteViewer_comboBox_noTableEntry());
                        tablesDropdownList.setEnabled(false);
                    } else {
                        dbTablesMap.keySet().forEach((tableName) -> {
                            tablesDropdownList.addItem(tableName);
                        });
                    }
                } catch (InterruptedException ex) {
                    logger.log(Level.SEVERE, String.format("Interrupted while opening SQLite database file '%s' (objId=%d)", sqliteDbFile.getName(), sqliteDbFile.getId()), ex); //NON-NLS
                    MessageNotifyUtil.Message.error(Bundle.SQLiteViewer_errorMessage_interrupted());
                } catch (ExecutionException ex) {
                    String errorMessage;
                    Throwable cause = ex.getCause();
                    if (cause instanceof NoCurrentCaseException) {
                        logger.log(Level.SEVERE, "Current case has been closed", ex); //NON-NLS
                        errorMessage = Bundle.SQLiteViewer_errorMessage_noCurrentCase();
                    } else if (cause instanceof TskCoreException || cause instanceof IOException) {
                        logger.log(Level.SEVERE, String.format("Failed to create temp copy of DB file '%s' (objId=%d)", sqliteDbFile.getName(), sqliteDbFile.getId()), ex); //NON-NLS
                        errorMessage = Bundle.SQLiteViewer_errorMessage_failedToExtractFile();
                    } else if (cause instanceof SQLException) {
                        logger.log(Level.SEVERE, String.format("Failed to get tables from DB file  '%s' (objId=%d)", sqliteDbFile.getName(), sqliteDbFile.getId()), ex); //NON-NLS
                        errorMessage = Bundle.SQLiteViewer_errorMessage_failedToQueryDatabase();
                    } else if (cause instanceof ClassNotFoundException) {
                        logger.log(Level.SEVERE, String.format("Failed to initialize JDBC SQLite '%s' (objId=%d)", sqliteDbFile.getName(), sqliteDbFile.getId()), ex); //NON-NLS
                        errorMessage = Bundle.SQLiteViewer_errorMessage_failedToinitJDBCDriver();
                    } else {
                        logger.log(Level.SEVERE, String.format("Unexpected exception while processing DB file  '%s' (objId=%d)", sqliteDbFile.getName(), sqliteDbFile.getId()), ex); //NON-NLS
                        errorMessage = Bundle.SQLiteViewer_errorMessage_unexpectedError(cause.getLocalizedMessage());
                    }
                    MessageNotifyUtil.Message.error(errorMessage);
                }
            }
        }.execute();
    }

    /**
     * Searches for a meta file associated with the give SQLite db If found,
     * copies the file to the temp folder
     *
     * @param sqliteFile   - SQLIte db file being processed
     * @param metaFileName name of meta file to look for
     */
    private void findAndCopySQLiteMetaFile(AbstractFile sqliteFile, String metaFileName) throws NoCurrentCaseException, TskCoreException, IOException {
        Case openCase = Case.getOpenCase();
        SleuthkitCase sleuthkitCase = openCase.getSleuthkitCase();
        Services services = new Services(sleuthkitCase);
        FileManager fileManager = services.getFileManager();
        List<AbstractFile> metaFiles = fileManager.findFiles(sqliteFile.getDataSource(), metaFileName, sqliteFile.getParent().getName());
        if (metaFiles != null) {
            for (AbstractFile metaFile : metaFiles) {
                String tmpMetafilePathName = openCase.getTempDirectory() + File.separator + metaFile.getName();
                File tmpMetafile = new File(tmpMetafilePathName);
                ContentUtils.writeToFile(metaFile, tmpMetafile);
            }
        }
    }

    /**
     * Gets the table names and schemas from the SQLite database file.
     *
     * @return A mapping of table names to SQL CREATE TABLE statements.
     */
    private Map<String, String> getTables() throws SQLException {
        Map<String, String> dbTablesMap = new TreeMap<>();
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(
                    "SELECT name, sql FROM sqlite_master "
                    + " WHERE type= 'table' "
                    + " ORDER BY name;"); //NON-NLS
            while (resultSet.next()) {
                String tableName = resultSet.getString("name"); //NON-NLS
                String tableSQL = resultSet.getString("sql"); //NON-NLS
                dbTablesMap.put(tableName, tableSQL);
            }
        } finally {
            if (null != resultSet) {
                resultSet.close();
            }
            if (null != statement) {
                statement.close();
            }
        }
        return dbTablesMap;
    }

    @NbBundle.Messages({"# {0} - tableName",
        "SQLiteViewer.selectTable.errorText=Error getting row count for table: {0}"
    })
    private void selectTable(String tableName) {
        if (worker != null && !worker.isDone()) {
            worker.cancel(false);
            worker = null;
        }

        worker = new SwingWorker<Integer, Void>() {
            @Override
            protected Integer doInBackground() throws Exception {

                Statement statement = null;
                ResultSet resultSet = null;
                try {
                    statement = connection.createStatement();
                    resultSet = statement.executeQuery(
                            "SELECT count (*) as count FROM " + tableName); //NON-NLS

                    return resultSet.getInt("count");
                } catch (SQLException ex) {
                    throw ex;
                } finally {
                    if (null != resultSet) {
                        resultSet.close();
                    }
                    if (null != statement) {
                        statement.close();
                    }
                }
            }

            @Override
            protected void done() {
                super.done();
                try {

                    numRows = get();
                    numEntriesField.setText(numRows + " entries");

                    currPage = 1;
                    currPageLabel.setText(Integer.toString(currPage));
                    numPagesLabel.setText(Integer.toString((numRows / ROWS_PER_PAGE) + 1));

                    prevPageButton.setEnabled(false);

                    if (numRows > 0) {
                        nextPageButton.setEnabled(((numRows > ROWS_PER_PAGE)));
                        readTable(tableName, (currPage - 1) * ROWS_PER_PAGE + 1, ROWS_PER_PAGE);
                    } else {
                        nextPageButton.setEnabled(false);
                        selectedTableView.setupTable(Collections.emptyList());
                    }

                } catch (InterruptedException ex) {
                    logger.log(Level.SEVERE, "Interrupted while getting row count from table " + tableName, ex); //NON-NLS
                    JOptionPane.showMessageDialog(WindowManager.getDefault().getMainWindow(),
                            ex.getMessage(),
                            Bundle.SQLiteViewer_selectTable_errorText(tableName),
                            JOptionPane.ERROR_MESSAGE);
                } catch (ExecutionException ex) {
                    logger.log(Level.SEVERE, "Unexpected exception while getting row count from table " + tableName, ex); //NON-NLS  
                    JOptionPane.showMessageDialog(WindowManager.getDefault().getMainWindow(),
                            ex.getCause().getMessage(),
                            Bundle.SQLiteViewer_selectTable_errorText(tableName),
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        };
        worker.execute();
    }

    @NbBundle.Messages({"# {0} - tableName",
        "SQLiteViewer.readTable.errorText=Error getting rows for table: {0}"})
    private void readTable(String tableName, int startRow, int numRowsToRead) {

        if (worker != null && !worker.isDone()) {
            worker.cancel(false);
            worker = null;
        }

        worker = new SwingWorker<ArrayList<Map<String, Object>>, Void>() {
            @Override
            protected ArrayList<Map<String, Object>> doInBackground() throws Exception {

                Statement statement = null;
                ResultSet resultSet = null;
                try {
                    statement = connection.createStatement();
                    resultSet = statement.executeQuery(
                            "SELECT * FROM " + tableName
                            + " LIMIT " + Integer.toString(numRowsToRead)
                            + " OFFSET " + Integer.toString(startRow - 1)
                    ); //NON-NLS

                    return resultSetToArrayList(resultSet);
                } catch (SQLException ex) {
                    throw ex;
                } finally {
                    if (null != resultSet) {
                        resultSet.close();
                    }
                    if (null != statement) {
                        statement.close();
                    }
                }
            }

            @Override
            protected void done() {

                if (isCancelled()) {
                    return;
                }

                super.done();
                try {
                    ArrayList<Map<String, Object>> rows = get();
                    if (Objects.nonNull(rows)) {
                        selectedTableView.setupTable(rows);
                    } else {
                        selectedTableView.setupTable(Collections.emptyList());
                    }
                } catch (InterruptedException ex) {
                    logger.log(Level.SEVERE, "Interrupted while reading table " + tableName, ex); //NON-NLS
                    JOptionPane.showMessageDialog(WindowManager.getDefault().getMainWindow(),
                            ex.getMessage(),
                            Bundle.SQLiteViewer_readTable_errorText(tableName),
                            JOptionPane.ERROR_MESSAGE);
                } catch (ExecutionException ex) {
                    logger.log(Level.SEVERE, "Unexpected exception while reading table " + tableName, ex); //NON-NLS
                    JOptionPane.showMessageDialog(WindowManager.getDefault().getMainWindow(),
                            ex.getCause().getMessage(),
                            Bundle.SQLiteViewer_readTable_errorText(tableName),
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        };

        worker.execute();
    }

    @NbBundle.Messages("SQLiteViewer.BlobNotShown.message=BLOB Data not shown")
    private ArrayList<Map<String, Object>> resultSetToArrayList(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();
        int columns = metaData.getColumnCount();
        ArrayList<Map<String, Object>> rowlist = new ArrayList<>();
        while (rs.next()) {
            Map<String, Object> row = new LinkedHashMap<>(columns);
            for (int i = 1; i <= columns; ++i) {
                if (rs.getObject(i) == null) {
                    row.put(metaData.getColumnName(i), "");
                } else {
                    if (metaData.getColumnTypeName(i).compareToIgnoreCase("blob") == 0) {
                        row.put(metaData.getColumnName(i), Bundle.SQLiteViewer_BlobNotShown_message());
                    } else {
                        row.put(metaData.getColumnName(i), rs.getObject(i));
                    }
                }
            }
            rowlist.add(row);
        }

        return rowlist;
    }
}
