/*
 * Autopsy
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.filequery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.io.FilenameUtils;
import org.apache.tools.ant.util.FileUtils;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;
import org.sleuthkit.autopsy.coreutils.PlatformUtil;

final class LoadSearchDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;
    private String fileName = null;
    private static final String SAVE_DIR = PlatformUtil.getUserDirectory() + File.separator + "discoveryFilterSaves";
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private static final String SAVE_EXTENSION = "dsf";

    /**
     * Creates new form SaveSearchDialog
     */
    @Messages({"LoadSearchDialog.title.text=Load Saved Filter Settings"})
    LoadSearchDialog() {
        super((JFrame) null, Bundle.LoadSearchDialog_title_text(), true);
        initComponents();
        setResizable(false);
        filtersTable.setDefaultEditor(Object.class, null);
        filtersTable.getSelectionModel().addListSelectionListener((e) -> {
            if (!e.getValueIsAdjusting()) {
                if (filtersTable.getSelectedRow() != -1) {
                    fileName = filtersTable.getValueAt(filtersTable.getSelectedRow(), 0) + "." + SAVE_EXTENSION;
                    setButtonsEnabled(true);
                } else {
                    fileName = null;
                    setButtonsEnabled(false);
                }

            }
        });
        filtersTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                super.mousePressed(mouseEvent);
                if (mouseEvent.getClickCount() == 2 && fileName != null) {
                    dispose(); //double clicking on item will close the load dialog with the fileName ready to be loaded
                }
            }
        });
        File folder = new File(SAVE_DIR);
        File[] files = folder.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                return FilenameUtils.getExtension(pathname.getName()).equalsIgnoreCase(SAVE_EXTENSION);
            }
        });
        if (files != null) {
            DefaultTableModel model = (DefaultTableModel) filtersTable.getModel();
            for (final File savedSettings : files) {
                model.addRow(new Object[]{FilenameUtils.getBaseName(savedSettings.getName()), DATE_FORMAT.format(new Date(savedSettings.lastModified()))});
            }
        }
    }

    void setButtonsEnabled(boolean enabled) {
        deleteSearchButton.setEnabled(enabled);
        loadSearchButton.setEnabled(enabled);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filtersScrollPane = new javax.swing.JScrollPane();
        filtersTable = new javax.swing.JTable();
        deleteSearchButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        loadSearchButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(400, 145));
        setResizable(false);

        filtersTable.setModel(new javax.swing.table.DefaultTableModel(
            new String [][] {},
            new String [] {"Search Name", "Date Saved"}
        ));
        filtersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        filtersScrollPane.setViewportView(filtersTable);

        org.openide.awt.Mnemonics.setLocalizedText(deleteSearchButton, org.openide.util.NbBundle.getMessage(LoadSearchDialog.class, "LoadSearchDialog.deleteSearchButton.text")); // NOI18N
        deleteSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSearchButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(LoadSearchDialog.class, "LoadSearchDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(loadSearchButton, org.openide.util.NbBundle.getMessage(LoadSearchDialog.class, "LoadSearchDialog.loadSearchButton.text")); // NOI18N
        loadSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filtersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteSearchButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cancelButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loadSearchButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, deleteSearchButton, loadSearchButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(loadSearchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton))
                    .addComponent(filtersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSearchButtonActionPerformed
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_loadSearchButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        fileName = null;
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    @Messages({"# {0} - fileName",
        "LoadSearchDialog.confimMessage.text=Are you sure you want to delete {0}?",
        "LoadSearchDialog.confirmTitle.text=Confirm Deletion?"})
    private void deleteSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSearchButtonActionPerformed
        int confirmed = JOptionPane.showConfirmDialog(this, Bundle.LoadSearchDialog_confimMessage_text(fileName), Bundle.LoadSearchDialog_confirmTitle_text(), JOptionPane.OK_CANCEL_OPTION);
        if (confirmed == JOptionPane.OK_OPTION) {
            if (fileName != null) {
                FileUtils.delete(new File(SAVE_DIR + File.separator + fileName));
            }
            ((DefaultTableModel) filtersTable.getModel()).removeRow(filtersTable.convertRowIndexToModel(filtersTable.getSelectedRow()));
            filtersTable.repaint();
            fileName = null;
            setButtonsEnabled(false);
        }
    }//GEN-LAST:event_deleteSearchButtonActionPerformed

    /**
     * Display the Search Other Cases dialog.
     */
    void display() {
        this.setLocationRelativeTo(WindowManager.getDefault().getMainWindow());
        pack();
        setVisible(true);
    }

    SearchFilterSave getSearch() throws FileNotFoundException, IOException {
        //get name of selected search
        if (fileName != null) {
            try (FileInputStream is = new FileInputStream(SAVE_DIR + File.separator + fileName); InputStreamReader reader = new InputStreamReader(is, StandardCharsets.UTF_8)) {
                GsonBuilder gsonBuilder = new GsonBuilder()
                        .setPrettyPrinting();
                Gson gson = gsonBuilder.create();
                return gson.fromJson(reader, SearchFilterSave.class);
            }
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton deleteSearchButton;
    private javax.swing.JScrollPane filtersScrollPane;
    private javax.swing.JTable filtersTable;
    private javax.swing.JButton loadSearchButton;
    // End of variables declaration//GEN-END:variables
}
