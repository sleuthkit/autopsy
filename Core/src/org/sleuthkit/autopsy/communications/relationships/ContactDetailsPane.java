/*
 * Autopsy Forensic Browser
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.communications.relationships;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.Node;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.datamodel.AbstractFile;
import org.sleuthkit.datamodel.BlackboardArtifact;
import org.sleuthkit.datamodel.Content;
import org.sleuthkit.datamodel.TskCoreException;

/**
 * Displays the propertied of a ContactNode in a PropertySheet.
 */
public final class ContactDetailsPane extends javax.swing.JPanel implements ExplorerManager.Provider {

    private static final Logger logger = Logger.getLogger(ContactDetailsPane.class.getName());
    
    private final static String DEFAULT_IMAGE_PATH = "/org/sleuthkit/autopsy/communications/images/defaultContact.png";
    
    private final ExplorerManager explorerManager = new ExplorerManager();
    private final ImageIcon defaultImage;

    /**
     * Displays the propertied of a ContactNode in a PropertySheet.
     */
    public ContactDetailsPane() {
        initComponents();
        nameLabel.setText("");
        
        defaultImage = new ImageIcon(ContactDetailsPane.class.getResource(DEFAULT_IMAGE_PATH));
    }

    /**
     * Sets the list of nodes for the property sheet.
     *
     * @param nodes List of nodes to set
     */
    public void setNode(Node[] nodes) {
        if (nodes != null && nodes.length == 1) {
            nameLabel.setText(nodes[0].getDisplayName());
            nameLabel.setIcon(null);
            propertySheet.setNodes(nodes);
            
            BlackboardArtifact n = nodes[0].getLookup().lookup(BlackboardArtifact.class);
            if(n != null) {
                nameLabel.setIcon(getImageFromArtifact(n));
            }
        } else {
            nameLabel.setText("");
            nameLabel.setIcon(null);
            propertySheet.setNodes(null);
        }
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }
    
    public ImageIcon getImageFromArtifact(BlackboardArtifact artifact){
        ImageIcon imageIcon = defaultImage;
        
        if(artifact == null) {
            return imageIcon;
        }
        
        BlackboardArtifact.ARTIFACT_TYPE artifactType = BlackboardArtifact.ARTIFACT_TYPE.fromID(artifact.getArtifactTypeID());
        if(artifactType != BlackboardArtifact.ARTIFACT_TYPE.TSK_CONTACT) {
            return imageIcon;
        }
        
        try {
            for(Content content: artifact.getChildren()) {
                if(content instanceof AbstractFile) {
                    AbstractFile file = (AbstractFile)content;
                    
                    try {
                        BufferedImage image = ImageIO.read(new File(file.getLocalAbsPath()));
                        imageIcon = new ImageIcon(image);
                        break;
                    } catch (IOException ex) {
                       // ImageIO.read will through an IOException if file is not an image
                       // therefore we don't need to report this exception just try
                       // the next file.
                    }
                }
            }
        } catch (TskCoreException ex) {
            logger.log(Level.WARNING, String.format("Unable to load image for contact: %d", artifact.getId()), ex);
        }
        
        return imageIcon;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        nameLabel = new javax.swing.JLabel();
        propertySheet = new org.openide.explorer.propertysheet.PropertySheet();

        setLayout(new java.awt.GridBagLayout());

        nameLabel.setFont(nameLabel.getFont().deriveFont(nameLabel.getFont().getSize()+13f));
        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(ContactDetailsPane.class, "ContactDetailsPane.nameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(16, 15, 15, 15);
        add(nameLabel, gridBagConstraints);

        propertySheet.setDescriptionAreaVisible(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(9, 15, 16, 15);
        add(propertySheet, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel nameLabel;
    private org.openide.explorer.propertysheet.PropertySheet propertySheet;
    // End of variables declaration//GEN-END:variables
}
