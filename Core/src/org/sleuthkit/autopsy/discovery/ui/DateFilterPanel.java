/*
 * Autopsy
 *
 * Copyright 2020 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.discovery.ui;

import com.github.lgooddatepicker.optionalusertools.DateChangeListener;
import com.github.lgooddatepicker.zinternaltools.DateChangeEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import org.sleuthkit.autopsy.discovery.search.AbstractFilter;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JSpinner;
import javax.swing.event.ListSelectionListener;
import org.openide.util.NbBundle;
import org.sleuthkit.autopsy.communications.Utils;
import org.sleuthkit.autopsy.discovery.search.SearchFiltering;

/**
 * Filter panel for allowing the user to filter on date.
 */
class DateFilterPanel extends AbstractDiscoveryFilterPanel {

    private static final long serialVersionUID = 1L;
    private static final long SECS_PER_DAY = 86400;

    /**
     * Creates new form DateFilterPanel.
     */
    @NbBundle.Messages({"# {0} - timeZone",
        "DateFilterPanel.dateRange.text=Date Range ({0}):"})
    DateFilterPanel() {
        initComponents();
        rangeRadioButton.setText(Bundle.DateFilterPanel_dateRange_text(Utils.getUserPreferredZoneId().toString()));
        //Disable manual entry in the spinner
        ((JSpinner.DefaultEditor) daysSpinner.getEditor()).getTextField().setEditable(false);
        //Disable manual entry in the date pickers
        startDatePicker.getComponentDateTextField().setEditable(false);
        endDatePicker.getComponentDateTextField().setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        dateFilterCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        daysSpinner = new javax.swing.JSpinner();
        daysLabel = new javax.swing.JLabel();
        mostRecentRadioButton = new javax.swing.JRadioButton();
        startCheckBox = new javax.swing.JCheckBox();
        startDatePicker = new com.github.lgooddatepicker.components.DatePicker();
        endDatePicker = new com.github.lgooddatepicker.components.DatePicker();
        endCheckBox = new javax.swing.JCheckBox();
        rangeRadioButton = new javax.swing.JRadioButton();

        org.openide.awt.Mnemonics.setLocalizedText(dateFilterCheckBox, org.openide.util.NbBundle.getMessage(DateFilterPanel.class, "DateFilterPanel.dateFilterCheckBox.text")); // NOI18N
        dateFilterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFilterCheckBoxActionPerformed(evt);
            }
        });

        daysSpinner.setModel(new javax.swing.SpinnerNumberModel(7, 1, 100000, 1));
        daysSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(daysSpinner, ""));
        daysSpinner.setEnabled(false);
        daysSpinner.setPreferredSize(new java.awt.Dimension(75, 26));
        daysSpinner.setValue(7);

        org.openide.awt.Mnemonics.setLocalizedText(daysLabel, org.openide.util.NbBundle.getMessage(DateFilterPanel.class, "DateFilterPanel.daysLabel.text")); // NOI18N
        daysLabel.setEnabled(false);

        buttonGroup1.add(mostRecentRadioButton);
        mostRecentRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(mostRecentRadioButton, org.openide.util.NbBundle.getMessage(DateFilterPanel.class, "DateFilterPanel.mostRecentRadioButton.text")); // NOI18N
        mostRecentRadioButton.setEnabled(false);
        mostRecentRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mostRecentRadioButtonStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(startCheckBox, org.openide.util.NbBundle.getMessage(DateFilterPanel.class, "DateFilterPanel.startCheckBox.text")); // NOI18N
        startCheckBox.setEnabled(false);
        startCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startCheckBoxStateChanged(evt);
            }
        });

        startDatePicker.setDate(LocalDate.now());
        startDatePicker.setEnabled(false);
        startDatePicker.setMinimumSize(new java.awt.Dimension(60, 22));
        startDatePicker.setPreferredSize(new java.awt.Dimension(110, 22));

        endDatePicker.setDate(LocalDate.now());
        endDatePicker.setEnabled(false);
        endDatePicker.setMinimumSize(new java.awt.Dimension(60, 22));
        endDatePicker.setPreferredSize(new java.awt.Dimension(110, 22));

        org.openide.awt.Mnemonics.setLocalizedText(endCheckBox, org.openide.util.NbBundle.getMessage(DateFilterPanel.class, "DateFilterPanel.endCheckBox.text")); // NOI18N
        endCheckBox.setEnabled(false);
        endCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                endCheckBoxStateChanged(evt);
            }
        });

        buttonGroup1.add(rangeRadioButton);
        rangeRadioButton.setEnabled(false);
        rangeRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeRadioButtonStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(mostRecentRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(daysSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(daysLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
            .addComponent(rangeRadioButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(endCheckBox)
                    .addComponent(startCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(endDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mostRecentRadioButton)
                    .addComponent(daysSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(daysLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rangeRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startCheckBox)
                    .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endCheckBox)
                    .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startCheckBoxStateChanged
        startDatePicker.setEnabled(startCheckBox.isEnabled() && startCheckBox.isSelected());
    }//GEN-LAST:event_startCheckBoxStateChanged

    private void endCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_endCheckBoxStateChanged
        endDatePicker.setEnabled(endCheckBox.isEnabled() && endCheckBox.isSelected());
    }//GEN-LAST:event_endCheckBoxStateChanged

    private void dateFilterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFilterCheckBoxActionPerformed
        rangeRadioButton.setEnabled(dateFilterCheckBox.isSelected());
        mostRecentRadioButton.setEnabled(dateFilterCheckBox.isSelected());
        rangeRadioButton.firePropertyChange("DateFilterChange", !rangeRadioButton.isEnabled(), rangeRadioButton.isEnabled());
        mostRecentRadioButton.firePropertyChange("DateFilterChange", !mostRecentRadioButton.isEnabled(), mostRecentRadioButton.isEnabled());
    }//GEN-LAST:event_dateFilterCheckBoxActionPerformed

    private void mostRecentRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mostRecentRadioButtonStateChanged
        daysSpinner.setEnabled(mostRecentRadioButton.isSelected());
        daysLabel.setEnabled(mostRecentRadioButton.isSelected());
    }//GEN-LAST:event_mostRecentRadioButtonStateChanged

    private void rangeRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangeRadioButtonStateChanged
        startCheckBox.setEnabled(rangeRadioButton.isEnabled() && rangeRadioButton.isSelected());
        endCheckBox.setEnabled(rangeRadioButton.isEnabled() && rangeRadioButton.isSelected());
        startCheckBox.firePropertyChange("StartButtonChange", true, false);
        endCheckBox.firePropertyChange("EndButtonChange", true, false);
    }//GEN-LAST:event_rangeRadioButtonStateChanged

    @Override
    void configurePanel(boolean selected, int[] indicesSelected) {
        dateFilterCheckBox.setSelected(selected);
        if (dateFilterCheckBox.isEnabled() && dateFilterCheckBox.isSelected()) {
            mostRecentRadioButton.setEnabled(true);
            rangeRadioButton.setEnabled(true);
            mostRecentRadioButton.setSelected(true);
        } else {
            mostRecentRadioButton.setEnabled(false);
            rangeRadioButton.setEnabled(false);
        }
    }

    @Override
    JCheckBox getCheckbox() {
        return dateFilterCheckBox;
    }

    @Override
    JList<?> getList() {
        return null;
    }

    @Override
    JLabel getAdditionalLabel() {
        return null;
    }

    @Override
    void addListeners(ActionListener actionListener, ListSelectionListener listListener) {
        dateFilterCheckBox.addActionListener(actionListener);
        startCheckBox.addActionListener(actionListener);
        endCheckBox.addActionListener(actionListener);
        rangeRadioButton.addActionListener(actionListener);
        mostRecentRadioButton.addActionListener(actionListener);
        startDatePicker.addDateChangeListener(new DateChangeListener() {
            @Override
            public void dateChanged(DateChangeEvent event) {
                actionListener.actionPerformed(new ActionEvent(startDatePicker, ActionEvent.ACTION_PERFORMED, "StartDateChanged"));
            }
        });
        endDatePicker.addDateChangeListener(new DateChangeListener() {
            @Override
            public void dateChanged(DateChangeEvent event) {
                actionListener.actionPerformed(new ActionEvent(endDatePicker, ActionEvent.ACTION_PERFORMED, "EndDateChanged"));
            }
        });
    }

    @Override
    void removeListeners() {
        for (ActionListener listener : dateFilterCheckBox.getActionListeners()) {
            dateFilterCheckBox.removeActionListener(listener);
        }
        for (ActionListener listener : rangeRadioButton.getActionListeners()) {
            rangeRadioButton.removeActionListener(listener);
        }
        for (ActionListener listener : mostRecentRadioButton.getActionListeners()) {
            mostRecentRadioButton.removeActionListener(listener);
        }
        for (ActionListener listener : rangeRadioButton.getActionListeners()) {
            rangeRadioButton.removeActionListener(listener);
        }
        for (ActionListener listener : startCheckBox.getActionListeners()) {
            startCheckBox.removeActionListener(listener);
        }
        for (ActionListener listener : endCheckBox.getActionListeners()) {
            endCheckBox.removeActionListener(listener);
        }
        for (DateChangeListener listener : endDatePicker.getDateChangeListeners()) {
            endDatePicker.removeDateChangeListener(listener);
        }
        for (DateChangeListener listener : startDatePicker.getDateChangeListeners()) {
            startDatePicker.removeDateChangeListener(listener);
        }
    }

    @NbBundle.Messages({"DateFilterPanel.invalidRange.text=Range or Only Last must be selected.",
        "DateFilterPanel.startOrEndNeeded.text=A start or end date must be specified to use the range filter.",
        "DateFilterPanel.startAfterEnd.text=Start date should be before the end date when both are enabled."})
    @Override
    String checkForError() {
        if (dateFilterCheckBox.isSelected()) {
            if (!(rangeRadioButton.isSelected() || mostRecentRadioButton.isSelected())) {
                return Bundle.DateFilterPanel_invalidRange_text();
            } else if (rangeRadioButton.isSelected() && !(startCheckBox.isSelected() || endCheckBox.isSelected())) {
                return Bundle.DateFilterPanel_startOrEndNeeded_text();
            } else if (startCheckBox.isSelected() && endCheckBox.isSelected() && startDatePicker.getDate().isAfter(endDatePicker.getDate())) {
                //if the dates are equal it will effectively search just that day due to the rounding up of the end date in the getFilter code
                return Bundle.DateFilterPanel_startAfterEnd_text();
            }
        }
        return "";
    }

    @Override
    AbstractFilter getFilter() {
        if (dateFilterCheckBox.isSelected()) {
            LocalDate startDate = LocalDate.MIN;
            LocalDate endDate = LocalDate.MAX;
            ZoneId zone = Utils.getUserPreferredZoneId();
            if (rangeRadioButton.isSelected() && (startCheckBox.isSelected() || endCheckBox.isSelected())) {
                if (startCheckBox.isSelected() && startDatePicker.getDate() != null) {
                    startDate = startDatePicker.getDate();
                }
                if (endCheckBox.isSelected() && endDatePicker.getDate() != null) {
                    endDate = endDatePicker.getDate();
                }
            } else if (dateFilterCheckBox.isSelected() && mostRecentRadioButton.isSelected()) {
                endDate = LocalDate.now();
                startDate = LocalDate.now().minus(Period.ofDays((Integer) daysSpinner.getValue()));
            }
            return new SearchFiltering.ArtifactDateRangeFilter(startDate.atStartOfDay(zone).toEpochSecond(), endDate.atStartOfDay(zone).toEpochSecond() + SECS_PER_DAY);//to insure end date is inclusive
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox dateFilterCheckBox;
    private javax.swing.JLabel daysLabel;
    private javax.swing.JSpinner daysSpinner;
    private javax.swing.JCheckBox endCheckBox;
    private com.github.lgooddatepicker.components.DatePicker endDatePicker;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton mostRecentRadioButton;
    private javax.swing.JRadioButton rangeRadioButton;
    private javax.swing.JCheckBox startCheckBox;
    private com.github.lgooddatepicker.components.DatePicker startDatePicker;
    // End of variables declaration//GEN-END:variables
}
