/*
 *
 * Autopsy Forensic Browser
 *
 * Copyright 2019-2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.report.caseuco;

import java.sql.SQLException;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.ComboBoxModel;
import org.sleuthkit.autopsy.casemodule.NoCurrentCaseException;
import org.sleuthkit.autopsy.datamodel.utils.DataSourceLoader;
import org.sleuthkit.autopsy.guiutils.DataSourceComboBoxModel;
import org.sleuthkit.datamodel.TskCoreException;

/**
 * UI controls for CASE-UCO report. It is a panel which provides the
 * ability to select a single datasource from a dropdown list
 * of sources in the current case.
 */
final class ReportCaseUcoConfigPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    static final long NO_DATA_SOURCE_SELECTED = -1;
    private ComboBoxModel<String> dataSourcesList = new DataSourceComboBoxModel();
    private final Map<Long, String> dataSourceMap;
    private final DataSourceLoader dataSourceLoader;

    /**
     * Creates new form ReportCaseUcoConfigPanel
     */
    ReportCaseUcoConfigPanel() throws NoCurrentCaseException, TskCoreException, SQLException {
        initComponents();
        this.dataSourceLoader = new DataSourceLoader();
        this.dataSourceMap = dataSourceLoader.getDataSourceMap();
        
        String[] dataSourcesNames = new String[dataSourceMap.size()];
        if (dataSourcesNames.length > 0) {
            dataSourcesNames = dataSourceMap.values().toArray(dataSourcesNames);
            setDatasourceComboboxModel(new DataSourceComboBoxModel(dataSourcesNames));
            
            selectDataSourceComboBox.setEnabled(true);
            selectDataSourceComboBox.setSelectedIndex(0);
        }
    }

    /**
     * Get the ID for the datasource selected in the combo box.
     *
     * @return the selected datasource ID or
         ReportCaseUcoConfigPanel.NO_DATA_SOURCE_SELECTED if none is selected
     */
    Long getSelectedDataSourceId() {
        for (Entry<Long, String> entry : this.dataSourceMap.entrySet()) {
            if (entry.getValue().equals(this.selectDataSourceComboBox.getSelectedItem())) {
                return entry.getKey();
            }
        }
        return ReportCaseUcoConfigPanel.NO_DATA_SOURCE_SELECTED;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectDataSourceComboBox = new javax.swing.JComboBox<>();
        jLabelSelectDataSource = new javax.swing.JLabel();

        selectDataSourceComboBox.setModel(dataSourcesList);
        selectDataSourceComboBox.setEnabled(false);

        jLabelSelectDataSource.setText(org.openide.util.NbBundle.getMessage(ReportCaseUcoConfigPanel.class, "ReportCaseUcoConfigPanel.jLabelSelectDataSource.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelSelectDataSource)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(selectDataSourceComboBox, 0, 348, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabelSelectDataSource)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectDataSourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(130, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelSelectDataSource;
    private javax.swing.JComboBox<String> selectDataSourceComboBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Set the datamodel for the combo box which displays the data sources in
     * the current case
     *
     * @param dataSourceComboBoxModel the DataSourceComboBoxModel to use
     */
    void setDatasourceComboboxModel(DataSourceComboBoxModel dataSourceComboBoxModel) {
        this.dataSourcesList = dataSourceComboBoxModel;
        this.selectDataSourceComboBox.setModel(dataSourcesList);
    }
}
