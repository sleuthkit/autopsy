/*
 * Autopsy Forensic Browser
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.datasourceprocessors.xry;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import org.apache.commons.lang3.StringUtils;
import org.sleuthkit.autopsy.corecomponentinterfaces.DataSourceProcessor;
import org.sleuthkit.autopsy.coreutils.ModuleSettings;

/**
 * Allows an examiner to configure the XRY Data source processor.
 */
@SuppressWarnings("PMD.SingularField") // UI widgets cause lots of false positives
final class XRYDataSourceProcessorConfigPanel extends JPanel {

    private static final long serialVersionUID = 1L;
    
    private static final String PROP_LAST_USED_PATH = "LAST_USED_PATH";
    private static final String SETTINGS_CONTEXT = "XRYDataSourceProcessorConfigPanel_Settings";
    
    private static final XRYDataSourceProcessorConfigPanel INSTANCE = 
            new XRYDataSourceProcessorConfigPanel();
    
    //Used to communicate with the DSP infrastructure. This config
    //panel will indicate when it is ready for an update.
    private final PropertyChangeSupport pcs;
    
    /**
     * Creates new form XRYDataSourceConfigPanel. 
     * Prevent direct instantiation.
     */
    private XRYDataSourceProcessorConfigPanel() {
        initComponents();
        pcs = new PropertyChangeSupport(this);
    }
    
    /**
     * Persists the last used path between application runs.
     */
    private void setLastUsedPath(Path selection) {
        Path parent = selection.getParent();
        ModuleSettings.setConfigSetting(SETTINGS_CONTEXT, 
                PROP_LAST_USED_PATH, parent.toString());
    }

    /**
     * Retrieves the last used path, if any. This path will be saved across 
     * application runs.
     */
    private Optional<Path> getLastUsedPath() {
        String lastFolderPath = ModuleSettings.getConfigSetting(
                SETTINGS_CONTEXT, PROP_LAST_USED_PATH);
        if (StringUtils.isNotBlank(lastFolderPath)) {
            Path lastPath = Paths.get(lastFolderPath);
            if (Files.exists(lastPath)) {
                return Optional.of(lastPath);
            }
        }
        return Optional.empty();
    }
    
    /**
     * Gets the singleton XRYDataSourceProcessorConfigPanel.
     */
    static XRYDataSourceProcessorConfigPanel getInstance() {
        return INSTANCE;
    }
    
    /**
     * Clears the error label.
     */
    void clearErrorText() {
        errorLabel.setText(null);
    }
    
    /**
     * Sets the error label to show the supplied text.
     */
    void setErrorText(String text) {
        errorLabel.setText(text);
    }
    
    /**
     * Clears the selected file path.
     */
    void clearSelectedFilePath() {
        filePathTextField.setText(null);
    }
    
    /**
     * Gets the file path selected by the examiner.
     */
    String getSelectedFilePath() {
        return filePathTextField.getText();
    }
    
    /**
     * Adds a property change listener to this config panel.
     */
    @Override
    public synchronized void addPropertyChangeListener(PropertyChangeListener pcl) {
        super.addPropertyChangeListener(pcl);
        pcs.addPropertyChangeListener(pcl);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filePathTextField = new javax.swing.JTextField();
        fileBrowserButton = new javax.swing.JButton();
        xrySelectFolderLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();

        filePathTextField.setEditable(false);
        filePathTextField.setText(org.openide.util.NbBundle.getMessage(XRYDataSourceProcessorConfigPanel.class, "XRYDataSourceProcessorConfigPanel.filePathTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(fileBrowserButton, org.openide.util.NbBundle.getMessage(XRYDataSourceProcessorConfigPanel.class, "XRYDataSourceProcessorConfigPanel.fileBrowserButton.text")); // NOI18N
        fileBrowserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileBrowserButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(xrySelectFolderLabel, org.openide.util.NbBundle.getMessage(XRYDataSourceProcessorConfigPanel.class, "XRYDataSourceProcessorConfigPanel.xrySelectFolderLabel.text")); // NOI18N

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(errorLabel, org.openide.util.NbBundle.getMessage(XRYDataSourceProcessorConfigPanel.class, "XRYDataSourceProcessorConfigPanel.errorLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(xrySelectFolderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filePathTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileBrowserButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(xrySelectFolderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileBrowserButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorLabel)
                .addContainerGap(235, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Opens a JFileChooser instance so that the examiner can select a XRY 
     * report folder.
     */
    private void fileBrowserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileBrowserButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        Optional<Path> lastUsedPath = getLastUsedPath();
        if(lastUsedPath.isPresent()) {
            fileChooser.setCurrentDirectory(lastUsedPath.get().toFile());
        }
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selection = fileChooser.getSelectedFile();
            setLastUsedPath(selection.toPath());
            filePathTextField.setText(selection.getAbsolutePath());
            
            //This will notify the wizard to revalidate the data source processor.
            pcs.firePropertyChange(DataSourceProcessor.DSP_PANEL_EVENT.UPDATE_UI.toString(), false, true);
        }
    }//GEN-LAST:event_fileBrowserButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton fileBrowserButton;
    private javax.swing.JTextField filePathTextField;
    private javax.swing.JLabel xrySelectFolderLabel;
    // End of variables declaration//GEN-END:variables
}
