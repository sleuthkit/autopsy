/*
 * Autopsy Forensic Browser
 *
 * Copyright 2023 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.basistech.df.cybertriage.autopsy.ctoptions.ctcloud;

import com.basistech.df.cybertriage.autopsy.ctoptions.subpanel.CTOptionsSubPanel;
import com.basistech.df.cybertriage.autopsy.ctapi.CTCloudException;
import com.basistech.df.cybertriage.autopsy.ctapi.CTApiDAO;
import com.basistech.df.cybertriage.autopsy.ctapi.json.AuthTokenResponse;
import com.basistech.df.cybertriage.autopsy.ctapi.json.DecryptedLicenseResponse;
import com.basistech.df.cybertriage.autopsy.ctapi.json.LicenseInfo;
import com.basistech.df.cybertriage.autopsy.ctapi.json.LicenseLimitType;
import com.basistech.df.cybertriage.autopsy.ctapi.json.LicenseResponse;
import com.basistech.df.cybertriage.autopsy.ctapi.util.LicenseDecryptorUtil;
import com.basistech.df.cybertriage.autopsy.ctapi.util.LicenseDecryptorUtil.InvalidLicenseException;
import org.sleuthkit.autopsy.coreutils.Desktop;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Optional;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.apache.commons.lang3.StringUtils;
import org.netbeans.spi.options.OptionsPanelController;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.ServiceProvider;
import org.openide.windows.WindowManager;
import org.sleuthkit.autopsy.core.UserPreferences;
import org.sleuthkit.autopsy.coreutils.Logger;

/**
 * Options panel to be displayed in the CTOptionsPanel for settings regarding
 * Cyber Triage Malware Scanner settings and license setup.
 */
@ServiceProvider(service = CTOptionsSubPanel.class)
public class CTMalwareScannerOptionsPanel extends CTOptionsSubPanel {

    private static final Logger logger = Logger.getLogger(CTMalwareScannerOptionsPanel.class.getName());

    private static final DateTimeFormatter LICENSE_EXPIRES_FORMAT = DateTimeFormatter
            .ofPattern("MMMM d, YYYY")
            .withZone(ZoneId.of(UserPreferences.getInferredUserTimeZone()));

    private static final DateTimeFormatter MALWARE_SCANS_RESET_FORMAT = DateTimeFormatter
            .ofPattern("MMM d, YYYY' at 'h:mma")
            .withZone(ZoneId.of(UserPreferences.getInferredUserTimeZone()));

    private final CTApiDAO ctApiDAO = CTApiDAO.getInstance();
    private final CTLicensePersistence ctPersistence = CTLicensePersistence.getInstance();

    private volatile LicenseInfo licenseInfo = null;
    private volatile String licenseInfoMessage = null;
    private volatile LicenseFetcher licenseFetcher = null;

    private static final String PURCHASE_URL = "https://cybertriage.com/autopsy-malware-module";

    private volatile AuthTokenResponse authTokenResponse = null;
    private volatile String authTokenMessage = null;
    private volatile AuthTokenFetcher authTokenFetcher = null;

    /**
     * Main constructor.
     */
    public CTMalwareScannerOptionsPanel() {
        initComponents();

        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentHidden(ComponentEvent e) {
                synchronized (CTMalwareScannerOptionsPanel.this) {
                    if (CTMalwareScannerOptionsPanel.this.isLicenseAddRunning()) {
                        CTMalwareScannerOptionsPanel.this.licenseFetcher.cancel(true);
                        CTMalwareScannerOptionsPanel.this.licenseFetcher = null;
                    }

                    if (CTMalwareScannerOptionsPanel.this.isMalwareScansRunning()) {
                        CTMalwareScannerOptionsPanel.this.authTokenFetcher.cancel(true);
                        CTMalwareScannerOptionsPanel.this.authTokenFetcher = null;
                    }
                }
            }

            @Override
            public void componentShown(ComponentEvent e) {
                synchronized (CTMalwareScannerOptionsPanel.this) {
                    if (CTMalwareScannerOptionsPanel.this.licenseInfo != null) {
                        loadMalwareScansInfo(CTMalwareScannerOptionsPanel.this.licenseInfo);
                    }
                }
            }
        }
        );
    }

    @Override
    public synchronized void saveSettings() {
        ctPersistence.saveLicenseResponse(getLicenseInfo());
    }

    @Override
    public boolean valid() {
        return true;
    }

    @Override
    public synchronized void loadSettings() {
        Optional<LicenseInfo> licenseInfoOpt = ctPersistence.loadLicenseInfo();
        LicenseInfo licenseInfo = licenseInfoOpt.orElse(null);
        setLicenseDisplay(licenseInfo, null);
        setMalwareScansDisplay(null, null);
        if (licenseInfo != null) {
            loadMalwareScansInfo(licenseInfo);
            this.purchaseFromLabel.setVisible(false);
            this.purchaseLink.setVisible(false);
        } else {
            this.purchaseFromLabel.setVisible(true);
            this.purchaseLink.setVisible(true);           
        }
    }

    private static String getHtmlLink(String url) {
        return "<html><span style=\"color: blue; text-decoration: underline\">" + url + "</span></html>";
    }

    private void gotoLink(String url) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(url));
            } catch (IOException | URISyntaxException e) {
                logger.log(Level.SEVERE, "Error opening link to: " + url, e);
            }
        } else {
            logger.log(Level.WARNING, "Desktop API is not supported.  Link cannot be opened.");
        }
    }

    private synchronized LicenseResponse getLicenseInfo() {
        return this.licenseInfo == null ? null : this.licenseInfo.getLicenseResponse();
    }        

    private synchronized void setLicenseDisplay(LicenseInfo licenseInfo, String licenseMessage) {
        this.licenseInfo = licenseInfo;
        this.licenseInfoMessage = licenseMessage;
        renderLicenseState();
    }

    private synchronized void setMalwareScansDisplay(AuthTokenResponse authTokenResponse, String authTokenMessage) {
        this.authTokenResponse = authTokenResponse;
        this.authTokenMessage = authTokenMessage;
        renderLicenseState();
    }

    /**
     * @return True if there is an operation to fetch the license.
     */
    private synchronized boolean isLicenseAddRunning() {
        return this.licenseFetcher != null && !this.licenseFetcher.isCancelled() && !this.licenseFetcher.isDone();
    }

    /**
     * @return True if there is an operation to fetch malware scans information.
     */
    private synchronized boolean isMalwareScansRunning() {
        return this.authTokenFetcher != null && !this.authTokenFetcher.isCancelled() && !this.authTokenFetcher.isDone();
    }

    @Messages({
        "CTOPtionsPanel_loadLicenseInfo_loading=Loading..."
    })
    private synchronized void loadLicenseInfo(String licenseNumber) {
        if (isLicenseAddRunning()) {
            this.licenseFetcher.cancel(true);
        }
        setLicenseDisplay(null, Bundle.CTOPtionsPanel_loadLicenseInfo_loading());
        setMalwareScansDisplay(null, null);
        this.licenseFetcher = new LicenseFetcher(licenseNumber);
        this.licenseFetcher.execute();
    }

    @Messages({
        "CTOPtionsPanel_loadMalwareScansInfo_loading=Loading..."
    })
    private synchronized void loadMalwareScansInfo(LicenseInfo licenseInfo) {
        if (isMalwareScansRunning()) {
            this.authTokenFetcher.cancel(true);
        }

        if (licenseInfo == null || licenseInfo.getDecryptedLicense() == null) {
            setMalwareScansDisplay(null, null);
            return;
        }

        setMalwareScansDisplay(null, Bundle.CTOPtionsPanel_loadMalwareScansInfo_loading());

        this.authTokenFetcher = new AuthTokenFetcher(licenseInfo.getDecryptedLicense());
        this.authTokenFetcher.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        malwareScansPanel = new javax.swing.JPanel();
        javax.swing.JLabel disclaimer = new javax.swing.JLabel();
        javax.swing.JPanel licenseInfoPanel = new javax.swing.JPanel();
        licenseInfoMessageLabel = new javax.swing.JLabel();
        licenseInfoExpiresLabel = new javax.swing.JLabel();
        licenseInfoIdLabel = new javax.swing.JLabel();
        licenseInfoUserLabel = new javax.swing.JLabel();
        licenseInfoAddButton = new javax.swing.JButton();
        maxFileUploadsLabel = new javax.swing.JLabel();
        maxHashLookupsLabel = new javax.swing.JLabel();
        hashLookupsRemainingLabel = new javax.swing.JLabel();
        malwareScansMessageLabel = new javax.swing.JLabel();
        countersResetLabel = new javax.swing.JLabel();
        fileUploadsRemainingLabel = new javax.swing.JLabel();
        javax.swing.JPanel purchasePanel = new javax.swing.JPanel();
        purchaseFromLabel = new javax.swing.JLabel();
        purchaseLink = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        malwareScansPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.malwareScansPanel.border.title"))); // NOI18N
        malwareScansPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(disclaimer, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.disclaimer.text")); // NOI18N
        disclaimer.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        malwareScansPanel.add(disclaimer, gridBagConstraints);

        licenseInfoPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(licenseInfoMessageLabel, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.licenseInfoMessageLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licenseInfoPanel.add(licenseInfoMessageLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(licenseInfoExpiresLabel, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.licenseInfoExpiresLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licenseInfoPanel.add(licenseInfoExpiresLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(licenseInfoIdLabel, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.licenseInfoIdLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licenseInfoPanel.add(licenseInfoIdLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(licenseInfoUserLabel, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.licenseInfoUserLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licenseInfoPanel.add(licenseInfoUserLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(licenseInfoAddButton, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.licenseInfoAddButton.text")); // NOI18N
        licenseInfoAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                licenseInfoAddButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        licenseInfoPanel.add(licenseInfoAddButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(maxFileUploadsLabel, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.maxFileUploadsLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        licenseInfoPanel.add(maxFileUploadsLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(maxHashLookupsLabel, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.maxHashLookupsLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licenseInfoPanel.add(maxHashLookupsLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(hashLookupsRemainingLabel, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.hashLookupsRemainingLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licenseInfoPanel.add(hashLookupsRemainingLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(malwareScansMessageLabel, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.malwareScansMessageLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licenseInfoPanel.add(malwareScansMessageLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(countersResetLabel, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.countersResetLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        licenseInfoPanel.add(countersResetLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(fileUploadsRemainingLabel, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.fileUploadsRemainingLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        licenseInfoPanel.add(fileUploadsRemainingLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        malwareScansPanel.add(licenseInfoPanel, gridBagConstraints);

        purchasePanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(purchaseFromLabel, org.openide.util.NbBundle.getMessage(CTMalwareScannerOptionsPanel.class, "CTMalwareScannerOptionsPanel.purchaseFromLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        purchasePanel.add(purchaseFromLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(purchaseLink, getHtmlLink(PURCHASE_URL));
        purchaseLink.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        purchaseLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                purchaseLinkMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        purchasePanel.add(purchaseLink, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        malwareScansPanel.add(purchasePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(malwareScansPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    @Messages({
        "CTMalwareScannerOptionsPanel_licenseAddDialog_title=Add a License...",
        "CTMalwareScannerOptionsPanel_licenseAddDialog_desc=License Number:",
        "CTMalwareScannerOptionsPanel_licenseAddDialogEnteredErr_title=License Number Already Entered",
        "CTMalwareScannerOptionsPanel_licenseAddDialogEnteredErr_desc=The license number has already been entered",
        "CTMalwareScannerOptionsPanel_licenseAddDialogPatternErr_title=Invalid License Number",
        "CTMalwareScannerOptionsPanel_licenseAddDialogPatternErr_desc=Please verify that license number is of format 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX'"})
    private void licenseInfoAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_licenseInfoAddButtonActionPerformed
        CTLicenseDialog licenseDialog = new CTLicenseDialog(WindowManager.getDefault().getMainWindow(), true);
        licenseDialog.setLocationRelativeTo(this);
        licenseDialog.setVisible(true);
        String licenseNumber = licenseDialog.getValue();
        if (licenseNumber != null) {
            synchronized (this) {
                if (this.licenseInfo == null || !licenseNumber.trim().equalsIgnoreCase(this.licenseInfo.getDecryptedLicense().getBoostLicenseId())) {
                    loadLicenseInfo(licenseNumber);
                    return;
                }
            }

            JOptionPane.showMessageDialog(
                    this,
                    Bundle.CTMalwareScannerOptionsPanel_licenseAddDialogEnteredErr_desc(),
                    Bundle.CTMalwareScannerOptionsPanel_licenseAddDialogEnteredErr_title(),
                    JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_licenseInfoAddButtonActionPerformed

    private void purchaseLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseLinkMouseClicked
        gotoLink(PURCHASE_URL);
    }//GEN-LAST:event_purchaseLinkMouseClicked

    @NbBundle.Messages({
        "# {0} - userName",
        "# {1} - email",
        "CTMalwareScannerOptionsPanel_licenseInfo_userInfo=<html>User: {0}<br/>Email: {1}</html>",
        "# {0} - expiresDate",
        "CTMalwareScannerOptionsPanel_licenseInfo_expires=Expires: {0}",
        "# {0} - idNumber",
        "CTMalwareScannerOptionsPanel_licenseInfo_id=ID: {0}",
        "# {0} - maxDailyLookups",
        "# {1} - resetSuffix",
        "CTMalwareScannerOptionsPanel_malwareScans_maxDailyHashLookups=Max Hash lookups: {0}{1}",
        "# {0} - maxDailyFileLookups",
        "# {1} - resetSuffix",
        "CTMalwareScannerOptionsPanel_malwareScans_maxDailyFileLookups=Max file uploads: {0}{1}",
        "# {0} - countersResetDate",
        "CTMalwareScannerOptionsPanel_malwareScans_countersReset=Counters reset: {0}",
        "# {0} - hashLookupsRemaining",
        "CTMalwareScannerOptionsPanel_malwareScans_hashLookupsRemaining=Hash lookups remaining: {0}",
        "# {0} - fileUploadsRemaining",
        "CTMalwareScannerOptionsPanel_malwareScans_fileUploadsRemaining=File uploads remaining: {0}"})
    private synchronized void renderLicenseState() {
        this.licenseInfoAddButton.setEnabled(!isLicenseAddRunning());

        this.licenseInfoMessageLabel.setVisible(StringUtils.isNotBlank(this.licenseInfoMessage));
        this.licenseInfoMessageLabel.setText(this.licenseInfoMessage);

        if (licenseInfo == null) {
            this.licenseInfoExpiresLabel.setVisible(false);
            this.licenseInfoIdLabel.setVisible(false);
            this.licenseInfoUserLabel.setVisible(false);
            this.purchaseFromLabel.setVisible(true);
            this.purchaseLink.setVisible(true);           
        } else {
            this.purchaseFromLabel.setVisible(false);
            this.purchaseLink.setVisible(false);           

            this.licenseInfoExpiresLabel.setVisible(true);
            this.licenseInfoExpiresLabel.setText(Bundle.CTMalwareScannerOptionsPanel_licenseInfo_expires(
                    this.licenseInfo.getDecryptedLicense().getExpirationDate() == null
                    ? ""
                    : LICENSE_EXPIRES_FORMAT.format(this.licenseInfo.getDecryptedLicense().getExpirationDate())));
            this.licenseInfoIdLabel.setVisible(true);
            this.licenseInfoIdLabel.setText(Bundle.CTMalwareScannerOptionsPanel_licenseInfo_id(StringUtils.defaultString(this.licenseInfo.getDecryptedLicense().getBoostLicenseId())));
            this.licenseInfoUserLabel.setVisible(true);
            this.licenseInfoUserLabel.setText(Bundle.CTMalwareScannerOptionsPanel_licenseInfo_userInfo(
                    StringUtils.defaultString(this.licenseInfo.getDecryptedLicense().getCustomerName()),
                    StringUtils.defaultString(this.licenseInfo.getDecryptedLicense().getCustomerEmail())));
        }

        this.malwareScansMessageLabel.setVisible(StringUtils.isNotBlank(this.authTokenMessage));
        this.malwareScansMessageLabel.setText(this.authTokenMessage);

        if (authTokenResponse == null || this.licenseInfo == null) {
            this.maxHashLookupsLabel.setVisible(false);
            this.maxFileUploadsLabel.setVisible(false);
            this.countersResetLabel.setVisible(false);
            this.hashLookupsRemainingLabel.setVisible(false);
            this.fileUploadsRemainingLabel.setVisible(false);
        } else {
            this.maxHashLookupsLabel.setVisible(true);
            this.maxHashLookupsLabel.setText(Bundle.CTMalwareScannerOptionsPanel_malwareScans_maxDailyHashLookups(
                    this.authTokenResponse.getHashLookupLimit(),
                    getResetSuffix(this.licenseInfo.getDecryptedLicense().getLimitType())));

            this.maxFileUploadsLabel.setVisible(true);
            this.maxFileUploadsLabel.setText(Bundle.CTMalwareScannerOptionsPanel_malwareScans_maxDailyFileLookups(
                    this.authTokenResponse.getFileUploadLimit(),
                    getResetSuffix(this.licenseInfo.getDecryptedLicense().getLimitType())));

            this.countersResetLabel.setVisible(true);
            this.countersResetLabel.setText(getCountersResetText(this.licenseInfo.getDecryptedLicense().getLimitType(), this.authTokenResponse));

            this.hashLookupsRemainingLabel.setVisible(true);
            this.hashLookupsRemainingLabel.setText(
                    Bundle.CTMalwareScannerOptionsPanel_malwareScans_hashLookupsRemaining(
                            remaining(this.authTokenResponse.getHashLookupLimit(), this.authTokenResponse.getHashLookupCount())));

            this.fileUploadsRemainingLabel.setVisible(true);
            this.fileUploadsRemainingLabel.setText(
                    Bundle.CTMalwareScannerOptionsPanel_malwareScans_fileUploadsRemaining(
                            remaining(this.authTokenResponse.getFileUploadLimit(), this.authTokenResponse.getFileUploadCount())));
        }
    }

    private static String getCountersResetText(LicenseLimitType limitType, AuthTokenResponse authTokenResponse) {
        if (limitType == null || limitType == LicenseLimitType.NO_RESET) {
            return "";
        } else {
            return Bundle.CTMalwareScannerOptionsPanel_malwareScans_countersReset(
                    MALWARE_SCANS_RESET_FORMAT.format(authTokenResponse.getResetDate()));
        }
    }

    @Messages({
        "CTMalwareScannerOptionsPanel_getResetSuffix_hourly=/hour",
        "CTMalwareScannerOptionsPanel_getResetSuffix_daily=/day",
        "CTMalwareScannerOptionsPanel_getResetSuffix_weekly=/week",
        "CTMalwareScannerOptionsPanel_getResetSuffix_monthly=/month"
    })
    private String getResetSuffix(LicenseLimitType limitType) {
        if (limitType == null) {
            return "";
        }

        switch (limitType) {
            case HOURLY:
                return Bundle.CTMalwareScannerOptionsPanel_getResetSuffix_hourly();
            case DAILY:
                return Bundle.CTMalwareScannerOptionsPanel_getResetSuffix_daily();
            case WEEKLY:
                return Bundle.CTMalwareScannerOptionsPanel_getResetSuffix_weekly();
            case MONTHLY:
                return Bundle.CTMalwareScannerOptionsPanel_getResetSuffix_monthly();
            case NO_RESET:
            default:
                return "";
        }
    }

    private long remaining(Long total, Long used) {
        total = total == null ? 0 : total;
        used = used == null ? 0 : used;
        return total - used;
    }

    private void acceptEula(LicenseResponse licenseResponse) {
        try {
            final EULADialog eulaDialog = new EULADialog(WindowManager.getDefault().getMainWindow(), true);
            eulaDialog.setLocationRelativeTo(this);
            eulaDialog.setSize(eulaDialog.getPreferredSize());
            eulaDialog.setVisible(true);

            if (eulaDialog.isAcceptPressed()) {
                // only indicate a change to save if we have accepted EULA for a license
                this.licenseInfo = LicenseDecryptorUtil.getInstance().createLicenseInfo(licenseResponse);
                this.firePropertyChange(OptionsPanelController.PROP_CHANGED, null, null);
            }
        } catch (IOException | InvalidLicenseException ex) {
            logger.log(Level.WARNING, "An error occurred while fetching data", ex);
            JOptionPane.showMessageDialog(
                    CTMalwareScannerOptionsPanel.this,
                    Bundle.CTMalwareScannerOptionsPanel_LicenseFetcher_localErr_desc(),
                    Bundle.CTMalwareScannerOptionsPanel_LicenseFetcher_localErr_title(),
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            setLicenseDisplay(this.licenseInfo, null);
            loadMalwareScansInfo(this.licenseInfo);
        }
    }

    @NbBundle.Messages({
        "CTMalwareScannerOptionsPanel_LicenseFetcher_apiErr_title=Server Error",
        "CTMalwareScannerOptionsPanel_LicenseFetcher_localErr_title=General Error",
        "# {0} - licenseCode",
        "CTMalwareScannerOptionsPanel_LicenseFetcher_defaultErrMsg_desc=Error activating boost license {0}",
        "CTMalwareScannerOptionsPanel_LicenseFetcher_localErr_desc=A general error occurred while fetching license information.  Please try again later.",})
    private class LicenseFetcher extends SwingWorker<LicenseResponse, Void> {

        private final String licenseText;

        public LicenseFetcher(String licenseText) {
            this.licenseText = licenseText;
        }

        @Override
        protected LicenseResponse doInBackground() throws Exception {
            if (this.isCancelled()) {
                return null;
            }
            return ctApiDAO.getLicenseInfo(licenseText);
        }

        @Override
        protected void done() {
            try {
                LicenseResponse licenseResponse = get();
                // if no result, show unauthorized
                if (licenseResponse == null) {
                    logger.log(Level.WARNING, "An API error occurred while fetching license information.  License fetch returned no result.");
                    JOptionPane.showMessageDialog(
                            CTMalwareScannerOptionsPanel.this,
                            CTCloudException.ErrorCode.UN_AUTHORIZED.getDescription(),
                            Bundle.CTMalwareScannerOptionsPanel_LicenseFetcher_apiErr_title(),
                            JOptionPane.ERROR_MESSAGE);
                    setLicenseDisplay(licenseInfo, null);
                    loadMalwareScansInfo(licenseInfo);
                    return;
                }
                
                // if not successful response 
                if (!Boolean.TRUE.equals(licenseResponse.isSuccess())) {
                    logger.log(Level.WARNING, "An API error occurred while fetching license information.  License fetch was not successful");
                    // use default message unless error message specified
                    String message = Bundle.CTMalwareScannerOptionsPanel_LicenseFetcher_defaultErrMsg_desc(licenseText);
                    if (!StringUtils.isBlank(licenseResponse.getErrorMsg())) {
                        message = licenseResponse.getErrorMsg();
                    }
                    JOptionPane.showMessageDialog(
                            CTMalwareScannerOptionsPanel.this,
                            message,
                            Bundle.CTMalwareScannerOptionsPanel_LicenseFetcher_apiErr_title(),
                            JOptionPane.ERROR_MESSAGE);
                    setLicenseDisplay(licenseInfo, null);
                    loadMalwareScansInfo(licenseInfo);
                    return;
                }
                
                // otherwise, load 
                SwingUtilities.invokeLater(() -> acceptEula(licenseResponse));
                
            } catch (InterruptedException | CancellationException ex) {
                // ignore cancellation; just load current license
                setLicenseDisplay(licenseInfo, null);
                loadMalwareScansInfo(licenseInfo);
            } catch (ExecutionException ex) {
                if (ex.getCause() != null && ex.getCause() instanceof CTCloudException cloudEx) {
                    logger.log(Level.WARNING, "An API error occurred while fetching license information", cloudEx);
                    JOptionPane.showMessageDialog(
                            CTMalwareScannerOptionsPanel.this,
                            cloudEx.getErrorCode().getDescription(),
                            Bundle.CTMalwareScannerOptionsPanel_LicenseFetcher_apiErr_title(),
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    logger.log(Level.WARNING, "An error occurred while fetching data", ex);
                    JOptionPane.showMessageDialog(
                            CTMalwareScannerOptionsPanel.this,
                            Bundle.CTMalwareScannerOptionsPanel_LicenseFetcher_localErr_desc(),
                            Bundle.CTMalwareScannerOptionsPanel_LicenseFetcher_localErr_title(),
                            JOptionPane.ERROR_MESSAGE);
                }
                setLicenseDisplay(licenseInfo, null);
                loadMalwareScansInfo(licenseInfo);
            } finally {
                synchronized (CTMalwareScannerOptionsPanel.this) {
                    CTMalwareScannerOptionsPanel.this.licenseFetcher = null;
                }
            }
        }
    }

    @NbBundle.Messages({
        "CTMalwareScannerOptionsPanel_MalwareScansFetcher_apiErr_title=Server Error",
        "CTMalwareScannerOptionsPanel_MalwareScansFetcher_localErr_title=General Error",
        "CTMalwareScannerOptionsPanel_MalwareScansFetcher_localErr_desc=A general error occurred while fetching malware scans information.  Please try again later.",})
    private class AuthTokenFetcher extends SwingWorker<AuthTokenResponse, Void> {

        private final DecryptedLicenseResponse decryptedLicense;

        public AuthTokenFetcher(DecryptedLicenseResponse decryptedLicense) {
            this.decryptedLicense = decryptedLicense;
        }

        @Override
        protected AuthTokenResponse doInBackground() throws Exception {
            if (this.isCancelled()) {
                return null;
            }
            
            return ctApiDAO.getAuthToken(decryptedLicense);           
        }

        @Override
        protected void done() {
            AuthTokenResponse authTokenResponse = null;
            try {
                authTokenResponse = get();
            } catch (InterruptedException | CancellationException ex) {
                // ignore cancellation
            } catch (ExecutionException ex) {
                if (ex.getCause() != null && ex.getCause() instanceof CTCloudException cloudEx) {
                    logger.log(Level.WARNING, "An API error occurred while fetching malware scans information for license", cloudEx);
                    JOptionPane.showMessageDialog(
                            CTMalwareScannerOptionsPanel.this,
                            cloudEx.getErrorDetails(),
                            Bundle.CTMalwareScannerOptionsPanel_MalwareScansFetcher_apiErr_title(),
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    logger.log(Level.WARNING, "An error occurred while fetching data", ex);
                    JOptionPane.showMessageDialog(
                            CTMalwareScannerOptionsPanel.this,
                            Bundle.CTMalwareScannerOptionsPanel_MalwareScansFetcher_localErr_desc(),
                            Bundle.CTMalwareScannerOptionsPanel_MalwareScansFetcher_localErr_title(),
                            JOptionPane.ERROR_MESSAGE);
                }
            } finally {
                synchronized (CTMalwareScannerOptionsPanel.this) {
                    CTMalwareScannerOptionsPanel.this.authTokenFetcher = null;
                    if (!this.isCancelled()) {
                        setMalwareScansDisplay(authTokenResponse, null);
                    }
                }
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel countersResetLabel;
    private javax.swing.JLabel fileUploadsRemainingLabel;
    private javax.swing.JLabel hashLookupsRemainingLabel;
    private javax.swing.JButton licenseInfoAddButton;
    private javax.swing.JLabel licenseInfoExpiresLabel;
    private javax.swing.JLabel licenseInfoIdLabel;
    private javax.swing.JLabel licenseInfoMessageLabel;
    private javax.swing.JLabel licenseInfoUserLabel;
    private javax.swing.JLabel malwareScansMessageLabel;
    private javax.swing.JPanel malwareScansPanel;
    private javax.swing.JLabel maxFileUploadsLabel;
    private javax.swing.JLabel maxHashLookupsLabel;
    private javax.swing.JLabel purchaseFromLabel;
    private javax.swing.JLabel purchaseLink;
    // End of variables declaration//GEN-END:variables
}
